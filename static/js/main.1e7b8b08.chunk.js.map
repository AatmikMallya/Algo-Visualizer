{"version":3,"sources":["resources/card-flip.mp3","components/LengthSlider.js","components/SpeedSlider.js","components/Menu.js","algorithms/Selection.js","algorithms/Insertion.js","components/SortingTimeVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","color","input","backgroundColor","borderRadius","LengthSlider","props","classes","React","useState","value","setValue","useEffect","onSlide","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","min","max","style","onChange","event","newValue","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","type","textAlign","SpeedSlider","Menu","state","algorithm","interval","this","onSpeedChange","length","onGenerate","onReset","selectedAlgorithm","document","getElementById","onExecute","onClick","handleGenerate","handleReset","handleSpeedChange","handleExecute","Component","getSelectionAnimations","arr","minIdx","temp","animations","i","push","j","getInsertionAnimations","temp2","green","cardFlip","UIfx","cardFlipMp3","throttleMs","SortingTimeVisualizer","array","bars","cachedArray","animationInterval","defaultLength","maxHeight","isRunning","generateArray","bind","resetArray","speedChange","getElementsByClassName","console","log","arraySize","windowWidth","window","innerWidth","Math","topRadius","bottomRadius","getBoundingClientRect","bottom","newArray","floor","random","setState","map","key","idx","undefined","height","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","oldArray","wait","play","idx1","idx2","mySort","testArr","testArr2","sort","a","b","arrayEquality","animateSelectionSort","animateInsertionSort","animateMergeSort","animateQuickSort","ms","Promise","resolve","setTimeout","arr1","arr2","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e7b8b08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-flip.2317ec81.mp3\";","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n  },\n  input: {\n    width: 50,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n    backgroundColor: 'rgba(100%, 100%, 100%, 20%)',\n    borderRadius: '10px',\n  },\n});\n\nexport default function LengthSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(25);\n\n  useEffect(() => {\n    if (value < 5) {\n      props.onSlide(5);\n    } else if (value > 125) {\n      props.onSlide(125);\n    } else {\n      props.onSlide(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 5) {\n      setValue(5);\n    } else if (value > 125) {\n      setValue(125);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='input-slider' gutterBottom >\n        Array Length\n      </Typography >\n      <Grid container spacing={2} alignItems='center'>\n        <Grid item xs>\n          <Slider\n            min={5}\n            max={125}\n            style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}}\n            value={typeof value === 'number' ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby='input-slider'\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin='dense'\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 5,\n              max: 125,\n              type: 'number',\n              'aria-labelledby': 'input-slider',\n              style: {textAlign: 'center'},\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 200,\n    color: 'rgba(100%, 100%, 100%, 82.5%)'\n  },\n});\n\nexport default function SpeedSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(10);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => props.onSlide(value), [value]);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='continuous-slider' gutterBottom>\n        Sorting Speed\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item>\n        </Grid>\n        <Grid item xs>\n          <Slider value={value} onChange={handleChange} style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}} aria-labelledby='continuous-slider' />\n        </Grid>\n        <Grid item>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport LengthSlider from './LengthSlider';\nimport SpeedSlider from './SpeedSlider';\nimport './Menu.css';\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithm: 'selection'\n        }\n    }\n\n    handleSpeedChange(interval) {\n        this.props.onSpeedChange(interval);\n    }\n\n    handleGenerate(length) {\n        this.props.onGenerate(length);\n    }\n    \n    handleReset() {\n        this.props.onReset();\n    }\n\n    handleExecute() {\n        const selectedAlgorithm = document.getElementById('menu-select').value;\n        this.props.onExecute(selectedAlgorithm);\n    }\n\n    render() {\n        return (\n            <div id='menu-container'>\n                <div className='menu-item' id='selection-sort' onClick={() => this.handleGenerate()}>New Array</div>\n                <div className='menu-item' id='selection-sort' onClick={() => this.handleReset()}>Reset Array</div>\n                <SpeedSlider onSlide={interval => this.handleSpeedChange(interval)} />\n                <LengthSlider onSlide={length => this.handleGenerate(length)} />\n                <select className='menu-item' id='menu-select' >\n                    <option value='selection'>Selection Sort</option>\n                    <option value='insertion'>Insertion Sort</option>\n                    <option value='merge'>Merge Sort</option>\n                    <option value='quick'>Quicksort</option>\n                </select>\n                <div className='menu-item' id='execute' onClick={() => this.handleExecute()}>Execute</div>\n            </div>\n        );\n    }\n}\n","const purple = '#8a2be2';\nconst red = '#dc143c';\n\nexport function getSelectionAnimations(arr) {\n    let minIdx, temp;\n    const animations = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        minIdx = i;\n        // arr[i] = purple\n        animations.push([i, purple, 'sorted'])\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n                // arr[j] = purple\n                animations.push([j, purple])\n            }\n            else {\n                // arr[j] = red\n                animations.push([j, red])\n            }\n        }\n\n        if (minIdx > i) {\n            temp = arr[minIdx];\n            arr[minIdx] = arr[i];\n            arr[i] = temp;\n            // swap heights a[i], a[minIdx]\n            animations.push([i, minIdx]);\n        }\n    }\n\n    return animations;\n}\n\n// function selectionAlgo(arr) {\n//     let minIdx, temp;\n    \n//     for (let i = 0; i < arr.length; i++) {\n//         minIdx = i;\n//         for (let j = i + 1; j < arr.length; j++) {\n//             if (arr[j] < arr[minIdx]) {\n//                 minIdx = j;\n//             }\n//         }\n\n//         if (minIdx > i) {\n//             temp = arr[minIdx];\n//             arr[minIdx] = arr[i];\n//             arr[i] = temp;\n//         }\n//     }\n\n//     return arr;\n// }\n","const purple = '#8a2be2';\n\nexport function getInsertionAnimations(arr) {\n    const animations = [];\n\n    for (let i = 1; i < arr.length; i++) {\n        let j = i - 1;\n        const temp = arr[i];\n        animations.push([i, purple])\n        while (j >= 0 && arr[j] > temp) {\n            const temp2 = arr[j+1]\n            arr[j+1] = arr[j];\n            arr[j] = temp2;\n            animations.push([j, j + 1])\n            j--;\n        }\n    }\n\n    return animations;\n}\n\n// Algo w/ more swapping for better visual\nexport function insertionAlgo(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        let j = i - 1;\n        const temp = arr[i];\n        while (j >= 0 && arr[j] > temp) {\n            const temp2 = arr[j+1]\n            arr[j+1] = arr[j];\n            arr[j] = temp2;\n            j--;\n        }\n    }\n    return arr;\n}\n\n// More efficient version - less swapping\nexport function insertionAlgo2(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        let j = i - 1;\n        const temp = arr[i];\n        while (j >= 0 && arr[j] > temp) {\n            arr[j+1] = arr[j];\n            j--;\n        }\n        arr[j+1] = temp;\n    }\n    return arr;\n}","import React from 'react';\nimport Menu from './Menu';\nimport './SortingTimeVisualizer.css';\nimport { getSelectionAnimations } from '../algorithms/Selection';\nimport { getInsertionAnimations } from '../algorithms/Insertion';\n\nimport UIfx from '../../node_modules/uifx';\nimport cardFlipMp3 from '../resources/card-flip.mp3';\n\nconst purple = '#8a2be2';\nconst red = '#dc143c';\nconst green = '#24682d';\nconst yellow = '#ffff00';\n\nconst cardFlip = new UIfx(cardFlipMp3, { throttleMs: 50 });\n\nexport default class SortingTimeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array : [], // holds height values\n            bars : [],\n        };\n        \n        // this.bars = [];\n        this.cachedArray = [];\n        this.animationInterval = 0;\n        this.defaultLength = 60;\n        this.maxHeight = 550;\n        this.isRunning = false;\n\n        this.generateArray = this.generateArray.bind(this);\n        this.resetArray = this.resetArray.bind(this);\n        this.speedChange = this.speedChange.bind(this);\n        this.handleExecute = this.handleExecute.bind(this);\n    }\n    \n    // initialize array to random values\n    componentDidMount() {\n        this.generateArray();\n    }\n\n    generateArray(length) {\n        if (this.isRunning) {\n            const array = document.getElementsByClassName('array');\n            for (let i = 0; i < array.length; i++) {\n                console.log(array)\n                array[i].style.backgroundColor = green;\n            }\n            this.isRunning = false;\n        }\n\n        let arraySize;\n        if (length) {\n            arraySize = length;\n            this.defaultLength = length;\n        } else {\n            arraySize = this.defaultLength\n        }\n\n        const windowWidth = window.innerWidth;\n        const margin = Math.max((windowWidth) / (10*arraySize), 1.5);\n        const width = Math.max((windowWidth - 100) / (1.75*arraySize), 7);\n        const topRadius = Math.max(width / 10, 3);\n        const bottomRadius = topRadius / 3;\n\n        // 85% of the distance between array container and menu\n        this.maxHeight = 0.85 * (document.getElementById('bars-container').getBoundingClientRect().bottom - document.getElementById('menu-container').getBoundingClientRect().bottom)\n        const newArray = [];\n        for (let i = 0; i < arraySize; i++) {\n            newArray.push(Math.floor(Math.random()*this.maxHeight + 15));\n        }\n\n        // const newArray = [306,419,14,650,378,456,251,416,440,148,101,173,167,10,225,445,20,462,107,156,276,506,189,15,201];\n        this.setState({\n            array: newArray,\n            bars: newArray.map((value, i) => <div className='array' key={i} idx={i} color={green} type={undefined} style={{\n                height: value,\n                margin: margin,\n                width: width,\n                borderTopLeftRadius: topRadius, borderTopRightRadius: topRadius,\n                borderBottomLeftRadius: bottomRadius, borderBottomRightRadius: bottomRadius\n            }} />)\n        });\n\n        this.cachedArray = [];\n        for (let i = 0; i < newArray.length; i++) {\n            this.cachedArray.push(newArray[i]);\n        }\n    }\n\n    resetArray() {\n        const array = document.getElementsByClassName('array');\n        const arraySize = array.length;\n\n        if (this.isRunning) {\n            for (let i = 0; i < arraySize; i++) {\n                array[i].style.backgroundColor = green;\n            }\n            this.isRunning = false;\n        }\n\n        const oldArray = []\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.height = this.cachedArray[i] + \"px\";\n            array[i].type = undefined;\n            oldArray.push(this.cachedArray[i])\n        }\n\n        this.setState({array: oldArray});\n    }\n\n    speedChange(interval) {\n        // compute reciprocal of interval to make the slider feel linear\n        this.animationInterval = interval < 5 ? 300 : 1500/interval - 15;        \n    }\n\n    async animateSelectionSort() {\n        const animations = getSelectionAnimations(this.state.array)\n        const arr = document.getElementsByClassName('array')\n        \n        // first bar will be purple (current min)\n        arr[0].style.backgroundColor = purple;\n        await wait(this.animationInterval);\n        \n        for (let i = 1; i < animations.length; i++) {\n            if (!this.isRunning) return;\n            // swapping animations[i][0] and animations[i][1]\n            if (typeof animations[i][1] === 'number') {\n                cardFlip.play();\n                // the last arraybar is currently red, change it back\n                arr[animations[i - 1][0]].style.backgroundColor = green;\n                const [idx1, idx2] = animations[i];\n\n                arr[idx1].style.backgroundColor = yellow;\n                arr[idx2].style.backgroundColor = yellow;\n                await wait(this.animationInterval);\n\n                const temp = arr[idx1].style.height;\n                arr[idx1].style.height = arr[idx2].style.height;\n                arr[idx2].style.height = temp;\n                await wait(this.animationInterval);\n\n                arr[idx1].style.backgroundColor = purple;\n                arr[idx2].style.backgroundColor = green;\n                await wait(this.animationInterval);\n            }\n            // coloring a bar red or purple to indicate comparison\n            else {\n                const [idx, color, type] = animations[i];\n                arr[idx].style.backgroundColor = color;\n                arr[idx].type = type;\n\n                if (animations[i - 1][1] === red) {\n                    arr[animations[i - 1][0]].style.backgroundColor = green;\n                }\n                // if this is the new min, reset the last min\n                if (color === purple) {\n                    for (let j = idx - 1; j > 0; j--) {\n                        if (arr[j].type === 'sorted') {\n                            break;\n                        }\n                        if (arr[j].style.backgroundColor === 'rgb(138, 43, 226)') { //purple\n                            arr[j].style.backgroundColor = green;\n                            break;\n                        }\n                    }\n                }\n                await wait(this.animationInterval);\n            }\n        }\n        \n        arr[arr.length - 1].style.backgroundColor = purple;\n        await wait(this.animationInterval);\n\n        for (let i = 0; i < arr.length; i++) {\n                arr[i].style.backgroundColor = green;\n                arr[i].type = undefined;\n                await wait(0.33 * this.animationInterval);\n        }\n        \n        this.isRunning = false;\n    }\n\n    async animateInsertionSort() {\n        const animations = getInsertionAnimations(this.state.array)\n        const arr = document.getElementsByClassName('array')\n\n        // first bar will be purple (current min)\n        arr[0].style.backgroundColor = purple;\n        await wait(this.animationInterval);\n        \n        for (let i = 0; i < animations.length; i++) {\n            if (!this.isRunning) {\n                for (let i = 0; i < arr.length; i++) {\n                    arr[i].style.backgroundColor = green;\n                }\n                return;\n            }\n\n            // swapping\n            if (typeof animations[i][1] === 'number') {\n                const [idx1, idx2] = animations[i];\n                \n                arr[idx1].style.backgroundColor = yellow;\n                arr[idx2].style.backgroundColor = red;\n                await wait(this.animationInterval);\n\n                const temp = arr[idx1].style.height;\n                arr[idx1].style.height = arr[idx2].style.height;\n                arr[idx2].style.height = temp;\n                arr[idx1].style.backgroundColor = red;\n                arr[idx2].style.backgroundColor = yellow;\n                await wait(this.animationInterval);\n\n                arr[idx2].style.backgroundColor = purple;\n                if (i === animations.length - 1 || typeof animations[i + 1][1] !== 'number') {\n                    cardFlip.play();\n                    await wait(this.animationInterval);\n                    arr[idx1].style.backgroundColor = purple;\n                }\n            }\n            // coloring\n            else {\n                const [idx, color] = animations[i];\n                arr[idx].style.backgroundColor = color;\n                await wait(this.animationInterval);\n            }\n        }\n\n        await wait(this.animationInterval);\n\n        for (let i = 0; i < arr.length; i++) {\n                arr[i].style.backgroundColor = green;\n                await wait(0.33 * this.animationInterval);\n        }\n        \n        this.isRunning = false;\n    }\n\n    async animateMergeSort() {\n        console.log('Todo: Merge sort')\n    }\n\n    async animateQuickSort() {\n        console.log('Todo: Quicksort')\n    }\n\n    // generates many large arrays, logs 'true' for each correct sort\n    testSort(mySort) {\n        for (let i = 0; i < 1000; i++) {\n            const testArr = [];\n            for (let j = 0; j < 1000; j++) {\n                testArr.push(Math.floor(Math.random()*500 + 20))\n            }\n            const testArr2 = [...testArr];\n    \n            mySort(testArr);\n            correctSort(testArr2);\n    \n            console.log(arrayEquality(testArr, testArr2));\n        }\n    }\n\n    async handleExecute(algorithm) {\n        this.isRunning = true;\n        if (algorithm === 'selection')\n            this.animateSelectionSort();\n        else if (algorithm === 'insertion')\n            this.animateInsertionSort();\n        else if (algorithm === 'merge')\n            this.animateMergeSort();\n        else if (algorithm === 'quick')\n            this.animateQuickSort();\n    }\n\n    // everything rendered on screen is here\n    render() {\n        return (\n            <div>\n                <div id='color-strip' />\n                <Menu onGenerate={this.generateArray} onReset={this.resetArray} onSpeedChange={this.speedChange} onExecute={this.handleExecute} />\n                    <div id='bars-container'>\n                        {this.state.bars}\n                        {/* <button id='test-sort' onClick={this.testSort.bind(this, **algo**)}>Test Sort</button> */}\n                    </div>\n            </div>\n        )\n    }\n}\n\n// effectively a synchronous sleep function\nfunction wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// for testing purposes\nfunction correctSort(arr) {\n    return arr.sort((a, b) => a - b);\n}\n\n// checks if two arrays are equal (for testing)\nfunction arrayEquality(arr1, arr2) {\n\tif (arr1.length !== arr2.length) {\n        return false;\n    }\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import React from 'react';\nimport './App.css';\nimport SortingTimeVisualizer from './components/SortingTimeVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingTimeVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}