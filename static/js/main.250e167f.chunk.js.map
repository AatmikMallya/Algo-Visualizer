{"version":3,"sources":["resources/card-flip.mp3","resources/card-flip-2.mp3","components/LengthSlider.js","components/SpeedSlider.js","components/Menu.js","components/Timer.js","algorithms/Insertion.js","animations/InsertionAnimation.js","algorithms/Merge.js","animations/MergeAnimation.js","algorithms/Quick.js","animations/QuickAnimation.js","algorithms/Selection.js","animations/SelectionAnimation.js","algorithms/Bubble.js","animations/BubbleAnimation.js","algorithms/Heap.js","animations/HeapAnimation.js","algorithms/Counting.js","animations/CountingAnimation.js","components/SortingTimeVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","color","input","backgroundColor","borderRadius","LengthSlider","props","classes","React","useState","value","setValue","useEffect","onSlide","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","min","max","style","onChange","event","newValue","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","type","textAlign","disableUnderline","SpeedSlider","Menu","handleSpeedChange","interval","onSpeedChange","handleGenerate","length","onGenerate","handleExecute","onExecute","handleReset","onReset","handleSelect","onSelect","document","getElementById","render","onClick","Component","Timer","startTimer","setState","status","timeStart","Date","now","state","time","timer","setInterval","stopTimer","clearInterval","resetTimer","setStatus","bool","setTimeout","centiseconds","Math","floor","slice","seconds","minutes","version","xmlns","viewBox","enableBackground","d","getInsertionAnimations","arr","animations","i","j","temp","push","animateInsertionSort","stateArray","a","getElementsByClassName","colors","purple","wait","animationInterval","isRunning","idx1","idx2","yellow","red","height","cardFlip","play","idx","green","gradients","3","1","2","4","8","5","16","6","32","7","64","getMergeAnimations","b","level","ceil","log2","mergeAnimate","left","right","end","k","animateMergeSort","getQuickAnimations","index","pivotIdx","pivot","partitionAnimate","animateQuickSort","sort","value1","parseInt","value2","getSelectionAnimations","minIdx","animateSelectionSort","undefined","getBubbleAnimations","animateBubbleSort","getHeapAnimations","len","heapifyAnimate","largest","animateHeapSort","playCount","isGreen","cardFlip2","getCountingAnimations","count","hue","mapToHue","animateCountingSort","UIfx","cardFlipMp3","throttleMs","volume","cardFlip2Mp3","blue","SortingTimeVisualizer","componentDidMount","maxHeight","getBoundingClientRect","bottom","setRunning","timerElement","current","classList","add","remove","menu","oldHue","getMenuHue","menuColors","fade","r","shadow","g","setProperty","speedChange","generateArray","arraySize","array","defaultLength","windowWidth","window","innerWidth","radius","newArray","random","bars","map","key","cachedArray","resetArray","oldArray","testSort","mySort","startTime","testArr","testArr2","correctSort","console","log","arrayEquality","elapsedTime","selectAlgorithm","selection","algorithm","newColor","algoColors","ref","createRef","ms","Promise","res","orange","lerp","u","start","step_u","currentColor","match","App","ReactGA","initialize","pageview","location","pathname","Boolean","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.250e167f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-flip.2317ec81.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card-flip-2.4f42bc57.mp3\";","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport './Menu.css';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n  },\n  input: {\n    width: 50,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n    backgroundColor: 'rgba(100%, 100%, 100%, 20%)',\n    borderRadius: '10px',\n  },\n});\n\nexport default function LengthSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(25);\n\n  useEffect(() => {\n    if (value < 5) {\n      props.onSlide(5);\n    } else if (value > 125) {\n      props.onSlide(125);\n    } else {\n      props.onSlide(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 5) {\n      setValue(5);\n    } else if (value > 125) {\n      setValue(125);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='input-slider' gutterBottom >\n        Array Length\n      </Typography >\n      <Grid container spacing={2} alignItems='center'>\n        <Grid item xs>\n          <Slider\n            min={5}\n            max={125}\n            style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}}\n            value={typeof value === 'number' ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby='input-slider'\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin='dense'\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 5,\n              max: 125,\n              type: 'number',\n              'aria-labelledby': 'input-slider',\n              style: {textAlign: 'center', color: 'white'},\n            }}\n            disableUnderline\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 220,\n    color: 'rgba(100%, 100%, 100%, 82.5%)'\n  },\n});\n\n// Sets the time interval between animation frames\nexport default function SpeedSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(10);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => props.onSlide(value), [value]);\n\n  const handleChange = (event, newValue) => setValue(newValue);\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='continuous-slider' gutterBottom>\n        Sorting Speed\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item>\n        </Grid>\n        <Grid item xs>\n          <Slider value={value} onChange={handleChange} style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}} aria-labelledby='continuous-slider' />\n        </Grid>\n        <Grid item>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport LengthSlider from './LengthSlider';\nimport SpeedSlider from './SpeedSlider';\nimport './Menu.css';\n\nexport default class Menu extends React.Component {\n    // Event handlers for menu items\n    handleSpeedChange = interval => this.props.onSpeedChange(interval);\n    handleGenerate = length => this.props.onGenerate(length);\n    handleExecute = () => this.props.onExecute();\n    handleReset = () => this.props.onReset();\n\n    handleSelect = () => this.props.onSelect(document.getElementById('menu-select').value);\n\n    render = () => {\n        return (\n            <div id='menu-container'>\n                <div className='menu-item' id='generate' onClick={() => this.handleGenerate()}>New Array</div>\n                <div className='menu-item' id='reset' onClick={() => this.handleReset()}>Reset Array</div>\n                <SpeedSlider onSlide={interval => this.handleSpeedChange(interval)} />\n                <LengthSlider onSlide={length => this.handleGenerate(length)} />\n                <select className='menu-item' id='menu-select' onChange={() => this.handleSelect()}>\n                    <option value='selection'>Selection Sort</option>\n                    <option value='insertion'>Insertion Sort</option>\n                    <option value='merge'>Merge Sort</option>\n                    <option value='quick'>Quicksort</option>\n                    <option value='heap'>Heapsort</option>\n                    <option value='bubble'>Bubble Sort</option>\n                    <option value='counting'>Counting Sort</option>\n                    {/* <option value='shell'>Shell sort</option> */}\n                    {/* <option value='comb'>Comb sort</option> */}\n                    {/* <option value='bucket'>Bucket sort</option> */}\n                    {/* <option value='radix'>Radix sort</option> */}\n                    {/* <option value='thanos'>Thanos sort</option> */}\n                </select>\n                <div className='menu-item' id='execute' onClick={() => this.handleExecute()}>Execute</div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './SortingTimeVisualizer.css';\n// https://github.com/peterdurham/timers-demo\n\nexport default class Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: this.props.status,\n            timeStart: 0,\n            time: 0\n        };\n    }\n\n    // Starts whenever \"Execute\" button is pressed\n    startTimer = () => {\n        this.setState({\n            status: true,\n            timeStart: Date.now() - this.state.time,\n            time: this.state.time\n        });\n        this.timer = setInterval(() => {\n            this.setState({ time: Date.now() - this.state.timeStart });\n        }, 10);\n    }\n\n    stopTimer = () => {\n        this.setState({ status: false });\n        clearInterval(this.timer);\n    }\n\n    resetTimer = () => {\n        this.setState({\n            timeStart: 0,\n            time: 0\n        });\n    }\n\n    setStatus = bool => {\n        if (bool) {\n            if (this.state.status) return;\n            this.resetTimer();\n            // Timer won't reset if this isn't in a setTimeout\n            setTimeout(() => this.startTimer(), 0);\n        }\n        else {\n            this.stopTimer();\n        }\n    }\n    \n    render = () => {\n        const { time } = this.state;\n        const centiseconds = (\"0\" + (Math.floor(time / 10) % 100)).slice(-2);\n        const seconds = (\"0\" + (Math.floor(time / 1000) % 60)).slice(-2);\n        const minutes = (\"0\" + (Math.floor(time / 60000) % 60)).slice(-2);\n        return (\n            <span id=\"timer-container\" className=\"noselect\">\n                <span className=\"timer timer-icon\">\n                    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 296.228 296.228\" enableBackground=\"new 0 0 296.228 296.228\">\n                        <g>\n                            <path d=\"m167.364,48.003v-23.003h10.5c6.903,0 12.5-5.597 12.5-12.5s-5.596-12.5-12.5-12.5h-59.5c-6.903,0-12.5,5.597-12.5,12.5s5.597,12.5 12.5,12.5h10.5v23.003c-59.738,9.285-105.604,61.071-105.604,123.37-3.55271e-15,68.845 56.01,124.854 124.854,124.854s124.854-56.01 124.854-124.854c0-62.299-45.866-114.085-105.604-123.37zm-19.25,223.225c-55.06,0-99.854-44.795-99.854-99.854s44.795-99.854 99.854-99.854 99.854,44.795 99.854,99.854-44.794,99.854-99.854,99.854z\"/>\n                            <path d=\"m160.614,166.18v-58.889c0-6.903-5.597-12.5-12.5-12.5s-12.5,5.597-12.5,12.5v66.1c0,2.033 0.81,3.982 2.25,5.416l34.969,34.822c4.893,4.872 12.806,4.854 17.678-0.037 4.871-4.892 4.854-12.807-0.037-17.678l-29.86-29.734z\"/>\n                        </g>\n                    </svg>\n                </span>\n                <span className=\"timer timer-display\">\n                    <span id=\"seconds\">{minutes}:{seconds}</span>\n                    <span id=\"centiseconds\">{centiseconds}</span>\n                </span>\n            </span>\n      );\n    }\n  }\n","const purple = '#8a2be2';\n\n// Executes sorting algorithm and determines the sequence of animations\nexport default function getInsertionAnimations(arr) {\n    const animations = [];\n\n    for (let i = 1; i < arr.length; i++) {\n        let j = i - 1;\n        const temp = arr[i];\n        // arr[i] = purple\n        animations.push([i, purple])\n        while (j >= 0 && arr[j] > temp) {\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            // Swap arr[j], arr[j + 1]\n            animations.push([j, j + 1])\n            j--;\n        }\n    }\n\n    return animations;\n}\n\n\n\n// Original insertion algo w/ more swapping for better visual\n// export function insertionAlgo(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n//             j--;\n//         }\n//     }\n//     return arr;\n// }\n\n// More efficient version - less swapping\n// export function insertionAlgo2(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             arr[j+1] = arr[j];\n//             j--;\n//         }\n//         arr[j+1] = temp;\n//     }\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getInsertionAnimations from '../algorithms/Insertion';\n\n// Render insertion sort animations\nexport default async function animateInsertionSort(stateArray) {\n    const animations = getInsertionAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    // First bar will be purple (current min)\n    arr[0].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n    \n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n        // Swap two elements\n        if (typeof animations[i][1] === 'number') {\n            const [idx1, idx2] = animations[i];\n            \n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.red;\n            await wait(animationInterval);\n\n            [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n            arr[idx1].style.backgroundColor = colors.red;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            arr[idx2].style.backgroundColor = colors.purple;\n            if (i === animations.length - 1 || typeof animations[i + 1][1] !== 'number') {\n                cardFlip.play();\n                await wait(animationInterval);\n                arr[idx1].style.backgroundColor = colors.purple;\n            }\n        }\n        // Color an element\n        else {\n            const [idx, color] = animations[i];\n            arr[idx].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n    }\n\n    await wait(animationInterval);\n\n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n","const purple = '#8a2be2';\n// Based on array size\nconst gradients = {\n  3: { 1: '#00747f', 2: '#0073e7', 4: purple },\n  4: { 1: '#007264', 2: '#0076b8', 4: '#006cf5', 8: purple },\n  5: { 1: '#007056', 2: '#007596', 4: '#0075d7', 8: '#0066f9', 16: purple },\n  6: { 1: '#006f4d', 2: '#00747f', 4: '#0076b8', 8: '#0073e7', 16: '#0061fa', 32: purple },\n  7: { 1: '#006e47', 2: '#00736f', 4: '#0076a0', 8: '#0076cf', 16: '#0070f0', 32: '#005df9', 64: purple }\n};\n\n// Executes sorting algorithm and determines the sequence of animations\nexport default function getMergeAnimations(a) {\n  const animations = [], b = [];\n  const level = Math.ceil(Math.log2(a.length))\n\n  for (let width = 1; width < a.length; width *= 2) {\n    const color = gradients[level][width];\n    // Play card flip sound effect\n    animations.push(null);\n    \n    for (let i = 0; i < a.length; i += 2 * width) {\n      mergeAnimate(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b, animations, color);\n    }\n    for (let i = 0; i < a.length; i++) {\n      a[i] = b[i];\n    }\n  }\n  return animations\n}\n\nfunction mergeAnimate(a, left, right, end, b, animations, color) {\n  let i = left, j = right;\n  for (let k = left; k < end; k++) {\n    if (i < right && (j >= end || a[i] <= a[j])) {\n      // arr[i] = color\n      animations.push([color, i]);\n      b[k] = a[i++];\n    }\n    else {\n      // Swap two elements\n      animations.push([color, k, j]);\n      b[k] = a[j++];\n    }\n  }\n}\n\n\n// Original merge sort algorithm\n// export function mergeAlgo(a) {\n//   const b = [];\n\n//   for (let width = 1; width < a.length; width *= 2) {\n//     for (let i = 0; i < a.length; i += 2 * width) {\n//       merge(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b);\n//     }\n//     for (let i = 0; i < a.length; i++) {\n//       a[i] = b[i];\n//     }\n//   }\n\n//   return a\n// }\n\n// function merge(a, left, right, end, b) {\n//   let i = left, j = right;\n  \n//   for (let k = left; k < end; k++) {\n//     if (i < right && (j >= end || a[i] <= a[j])) {\n//       b[k] = a[i++];\n//     }\n//     else {\n//       b[k] = a[j++];\n//     }\n//   }\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getMergeAnimations from '../algorithms/Merge';\n\n// Render merge sort animations\nexport default async function animateMergeSort(stateArray) {\n    const animations = getMergeAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n        // New merge iteration\n        if (!animations[i]) {\n            cardFlip.play();\n        }\n        // Swap two elements\n        else if (animations[i].length === 3) {\n            const [color, idx1, idx2] = animations[i];\n\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            const temp = arr[idx2].style.height;\n            for (let i = idx2; i > idx1; i--) {\n                arr[i].style.height = arr[i - 1].style.height;\n            }\n            arr[idx1].style.height = temp;\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = color;\n            await wait(animationInterval);\n\n            arr[idx1].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n        // Color one element\n        else {\n            const [color, idx] = animations[i];\n            arr[idx].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            arr[idx].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n    }\n\n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n","// Executes sorting algorithm and determines the sequence of animations\nexport default function getQuickAnimations(arr, left, right, animations) {\n    let index;\n    if (arr.length > 1) {\n        index = partitionAnimate(arr, left, right, animations);\n        if (left < index - 1) {\n            getQuickAnimations(arr, left, index - 1, animations);\n        }\n        if (index < right) {\n            getQuickAnimations(arr, index, right, animations);\n        }\n    }\n    return animations;\n}\n\nfunction partitionAnimate(arr, left, right, animations) {\n    const pivotIdx = Math.floor((right + left) / 2)\n    const pivot = arr[pivotIdx];\n    // Color the pivot element red\n    animations.push([pivotIdx])\n    \n    let i = left;\n    let j = right;\n\n    while (i <= j) {\n        while (arr[i] < pivot) {\n            i++;\n        }\n        while (arr[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n            // Swap arr[i], arr[j]\n            animations.push([i, j])\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\n\n// Original quicksort algorithm\n// export function quickAlgo(arr, left, right) {\n//     let index;\n//     if (arr.length > 1) {\n//         index = partition(arr, left, right);\n//         if (left < index - 1) { // more elements on the left side of the pivot\n//             quickAlgo(arr, left, index - 1);\n//         }\n//         if (index < right) { // more elements on the right side of the pivot\n//             quickAlgo(arr, index, right);\n//         }\n//     }\n//     return arr;\n// }\n\n// function partition(arr, left, right) {\n//     const pivot = arr[Math.floor((right + left) / 2)];\n    \n//     let i = left;\n//     let j = right;\n\n//     while (i <= j) {\n//         while (arr[i] < pivot) {\n//             i++;\n//         }\n//         while (arr[j] > pivot) {\n//             j--;\n//         }\n//         if (i <= j) {\n//             [arr[i], arr[j]] = [arr[j], arr[i]];\n//             i++;\n//             j--;\n//         }\n//     }\n//     return i;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getQuickAnimations from '../algorithms/Quick';\n\n// Render quick sort animations\nexport default async function animateQuickSort(stateArray) {\n    const animations = getQuickAnimations(stateArray, 0, stateArray.length - 1, []);\n    const arr = document.getElementsByClassName('array');\n    stateArray.sort((a, b) => a - b);\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n        // Select new pivot\n        if (animations[i].length === 1) {\n            cardFlip.play();\n            const [idx] = animations[i];\n\n            arr[idx].style.backgroundColor = colors.red;\n            await wait(animationInterval + 10);\n        }\n        // Swap two elements\n        else {\n            const [idx1, idx2] = animations[i];\n\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval + 10);\n\n            [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n            await wait(animationInterval + 10);\n\n            const value1 = parseInt(arr[idx1].style.height.slice(0, -2));\n            const value2 = parseInt(arr[idx2].style.height.slice(0, -2));\n            arr[idx1].style.backgroundColor = value1 === stateArray[idx1] ? colors.purple : colors.green;\n            arr[idx2].style.backgroundColor = value2 === stateArray[idx2] ? colors.purple : colors.green;\n            await wait(animationInterval + 10);\n        }\n    }\n    \n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n","const purple = '#8a2be2';\nconst red = '#dc143c';\n\n// Executes sorting algorithm and determines the sequence of animations\nexport default function getSelectionAnimations(arr) {\n    const animations = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        let minIdx = i;\n        // arr[i] = purple\n        animations.push([i, purple, 'sorted'])\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n                // arr[j] = purple\n                animations.push([j, purple])\n            }\n            else {\n                // arr[j] = red\n                animations.push([j, red])\n            }\n        }\n\n        if (minIdx > i) {\n            [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n            // Swap a[i], a[minIdx]\n            animations.push([i, minIdx]);\n        }\n    }\n\n    return animations;\n}\n\n\n// Original selection sort algorithm\n// export function selectionAlgo(arr) {\n//     let minIdx;\n    \n//     for (let i = 0; i < arr.length; i++) {\n//         minIdx = i;\n//         for (let j = i + 1; j < arr.length; j++) {\n//             if (arr[j] < arr[minIdx]) {\n//                 minIdx = j;\n//             }\n//         }\n\n//         if (minIdx > i) {\n//             [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n//         }\n//     }\n\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getSelectionAnimations from '../algorithms/Selection';\n\n// Render selection sort animations\nexport default async function animateSelectionSort(stateArray) {\n    const animations = getSelectionAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n    \n    // First bar will be purple (current min)\n    arr[0].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n    \n    for (let i = 1; i < animations.length; i++) {\n        if (!isRunning) return;\n        // Swap two elements\n        if (typeof animations[i][1] === 'number') {\n            cardFlip.play();\n            // Last element is still red\n            arr[animations[i - 1][0]].style.backgroundColor = colors.green;\n            const [idx1, idx2] = animations[i];\n\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n            await wait(animationInterval);\n\n            arr[idx1].style.backgroundColor = colors.purple;\n            arr[idx2].style.backgroundColor = colors.green;\n            await wait(animationInterval);\n        }\n        // Color a bar red/purple to indicate result of comparison\n        else {\n            const [idx, color, type] = animations[i];\n            arr[idx].style.backgroundColor = color;\n            arr[idx].type = type;\n\n            if (animations[i - 1][1] === colors.red) {\n                arr[animations[i - 1][0]].style.backgroundColor = colors.green;\n            }\n            // Reset the previous min to green\n            if (color === colors.purple) {\n                for (let j = idx - 1; j > 0; j--) {\n                    if (arr[j].type !== 'sorted' && arr[j].style.backgroundColor === 'rgb(138, 43, 226)') { //purple\n                        arr[j].style.backgroundColor = colors.green;\n                    }\n                }\n            }\n            await wait(animationInterval);\n        }\n    }\n    \n    arr[arr.length - 1].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n\n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[i].type = undefined;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].type = undefined;\n        await wait(1000 / arr.length);\n    }\n}\n","// Executes sorting algorithm and determines the sequence of animations\nexport default function getBubbleAnimations(arr) {\n    const animations = [];\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > arr[j + 1]) {\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                // Swap arr[j], arr[j + 1]\n                animations.push([j, j + 1]);\n            }\n        }\n    }\n    return animations;\n}\n\n\n// Original bubble sort algorithm\n// export function bubbleAlgo(arr) {\n//     for (let i = 0; i < arr.length; i++) {\n//         for (let j = 0; j < arr.length; j++) {\n//             if (arr[j] > arr[j + 1]) {\n//                 [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n//             }\n//         }\n//     }\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getBubbleAnimations from '../algorithms/Bubble';\n\n// Render bubble sort animations\nexport default async function animateBubbleSort(stateArray) {\n    const animations = getBubbleAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) break;\n        // Only operation is swapping\n        const [idx1, idx2] = animations[i];\n        arr[idx1].style.backgroundColor = colors.yellow;\n        arr[idx2].style.backgroundColor = colors.yellow;\n        await wait(animationInterval);\n\n        [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n        await wait(animationInterval);\n        \n        const value1 = parseInt(arr[idx1].style.height.slice(0, -2));\n        const value2 = parseInt(arr[idx2].style.height.slice(0, -2));\n        arr[idx1].style.backgroundColor = value1 === stateArray[idx1] ? colors.purple : colors.green;\n        if (value2 === stateArray[idx2]) {\n            cardFlip.play();\n            arr[idx2].style.backgroundColor = colors.purple;\n        }\n        else {\n            arr[idx2].style.backgroundColor = colors.green;\n        }\n        \n        await wait(animationInterval);\n    }\n\n    await wait(500);    \n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n\n","// Executes sorting algorithm and determines the sequence of animations\nexport default function getHeapAnimations(arr) {\n    const animations = [];\n    const len = arr.length\n    let i  = Math.floor(len / 2 - 1);\n    // Last index of heap\n    let j = len - 1;\n\n    while (i >= 0) {\n        heapifyAnimate(arr, len, i, animations);\n        i--;\n    }\n\n    while (j >= 0) {\n        [arr[0], arr[j]] = [arr[j], arr[0]];\n        // Swap arr[0], arr[j]\n        animations.push([0, j])\n        heapifyAnimate(arr, j, 0, animations);\n        j--;\n    }\n    \n    return animations;\n}\n\nfunction heapifyAnimate(arr, len, i, animations) {\n    let largest = i;\n    const left = i * 2 + 1;\n    const right = left + 1;\n\n    if (left < len && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    if (right < len && arr[right] > arr[largest]) {\n        largest = right;\n    }\n\n    if (largest !== i) {\n        [arr[i], arr[largest]] = [arr[largest], arr[i]];\n        // Swap arr[i], arr[largest]\n        animations.push([i, largest, true])\n        heapifyAnimate(arr, len, largest, animations);\n    }\n}\n\n\n// // Original heap sort algorithm\n// export function heapAlgo(arr) {\n//     const len = arr.length\n//     let i  = Math.floor(len / 2 - 1);\n//     // Last index of heap\n//     let j = len - 1;\n\n//     while (i >= 0) {\n//         heapify(arr, len, i);\n//         i--;\n//     }\n\n//     while (j >= 0) {\n//         [arr[0], arr[j]] = [arr[j], arr[0]];\n//         heapify(arr, j, 0);\n//         j--;\n//     }\n    \n//     return arr;\n// }\n\n// function heapify(arr, len, i) {\n//     let largest = i;\n//     const left = i * 2 + 1;\n//     const right = left + 1;\n\n//     if (left < len && arr[left] > arr[largest]) {\n//         largest = left;\n//     }\n//     if (right < len && arr[right] > arr[largest]) {\n//         largest = right;\n//     }\n\n//     if (largest !== i) {\n//         [arr[i], arr[largest]] = [arr[largest], arr[i]];\n//         heapify(arr, len, largest);\n//     }\n// }\n","import { cardFlip, cardFlip2, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getHeapAnimations from '../algorithms/Heap';\n\n// Render heap sort animations\nexport default async function animateHeapSort(stateArray) {\n    const animations = getHeapAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    let playCount = 0;\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) break;\n        // Only procedure is swapping\n        const [idx1, idx2, isGreen] = animations[i];\n        arr[idx1].style.backgroundColor = colors.yellow;\n        arr[idx2].style.backgroundColor = colors.yellow;\n        await wait(animationInterval);\n\n        [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n        await wait(animationInterval);\n        \n        arr[idx1].style.backgroundColor = colors.green;\n        if (isGreen) {\n            if (++playCount === 3) {\n                playCount = 0;\n                cardFlip.play();\n            }\n            arr[idx2].style.backgroundColor = colors.green;\n        }\n        else {\n            playCount = 4;\n            cardFlip2.play();\n            arr[idx2].style.backgroundColor = colors.purple;\n        }\n        await wait(animationInterval);\n    }\n\n    await wait(500); \n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}","let min, max;\n\n// Executes sorting algorithm and determines the sequence of animations\nexport default function getCountingAnimations(arr) {\n    const animations = [];\n    max = Math.max(...arr);\n    min = Math.min(...arr);\n    let i = min;\n    let j = 0;\n    let count = [];\n\n    for (i; i <= max; i++) {\n        count[i] = 0;\n    }\n    for (i = 0; i < arr.length; i++) {\n        count[arr[i]]++;\n        const hue = mapToHue(arr[i]);\n        animations.push([i, hue]);\n    }\n\n    for (i = min; i <= max; i++) {\n        while (count[i] > 0) {\n            arr[j] = i;\n            const hue = mapToHue(i);\n            animations.push([j, i, hue]);\n            j++;\n            count[i]--;\n        }\n    }\n    \n    return animations;\n}\n\n\n// Original counting sort algorithm\n// export function countingAlgo(arr) {\n//     max = Math.max(...arr);\n//     min = Math.min(...arr);\n//     let i = min;\n//     let j = 0;\n//     let count = [];\n\n//     for (i; i <= max; i++) {\n//         count[i] = 0;\n//     }\n//     for (i = 0; i < arr.length; i++) {\n//         count[arr[i]]++;\n//     }\n\n//     for (i = min; i <= max; i++) {\n//         while (count[i] > 0) {\n//             arr[j] = i;\n//             j++;\n//             count[i]--;\n//         }\n//     }\n\n//     return arr;\n// }\n\n// Maps a value to the 0-240 range on the hue wheel based on value range\nfunction mapToHue(value) {\n    // a1,a2 --> min,max\n    // b1,b2 --> 0, 240\n    return 240 * (value - min) / (max - min);\n}\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getCountingAnimations from '../algorithms/Counting';\n\n// Render heap sort animations\nexport default async function animateCountingSort(stateArray) {\n    const animations = getCountingAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    \n    // Color array elements according to their value\n    let i = 0;\n    for (i; i < animations.length / 2; i++) {\n        if (!isRunning) break;\n\n        const [idx, hue] = animations[i];\n        arr[idx].style.backgroundColor = `hsl(${hue}, 100%, 45%)`;\n        await wait(animationInterval + 10);\n    }\n    await wait(500);\n\n    // Sorting step\n    for (i; i < animations.length; i++) {\n        if (!isRunning) break;\n        const [idx, height, hue] = animations[i];\n        if (arr[idx].style.height !== height + 'px') {\n            cardFlip.play();\n            arr[idx].style.height = height + 'px';\n        }\n        arr[idx].style.backgroundColor = `hsl(${hue}, 100%, 45%)`;\n\n        await wait(animationInterval + 10);\n    }\n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}","import React from 'react';\nimport Menu from './Menu';\nimport Timer from './Timer';\nimport UIfx from 'uifx';\nimport cardFlipMp3 from '../resources/card-flip.mp3';\nimport cardFlip2Mp3 from '../resources/card-flip-2.mp3';\nimport './SortingTimeVisualizer.css';\n\nimport animateInsertionSort from '../animations/InsertionAnimation';\nimport animateMergeSort from '../animations/MergeAnimation';\nimport animateQuickSort from '../animations/QuickAnimation';\nimport animateSelectionSort from '../animations/SelectionAnimation';\nimport animateBubbleSort from '../animations/BubbleAnimation';\nimport animateHeapSort from '../animations/HeapAnimation';\nimport animateCountingSort from '../animations/CountingAnimation';\n\n// import { countingAlgo } from '../algorithms/Counting';\n\n// Not very React-y, but these are only passed to animation/algorithm scripts that execute the sort\nexport let isRunning = false;\nexport let animationInterval = 0;\nexport const cardFlip = new UIfx(cardFlipMp3, { throttleMs: 60, volume: 0.7 });\nexport const cardFlip2= new UIfx(cardFlip2Mp3,{ throttleMs: 120,volume: 0.6 });\nexport const colors = {\n    purple: '#8a2be2',\n    red: '#dc143c',\n    green: '#24682d',\n    yellow: '#ffff00',\n    blue: '#0076b8'\n};\n\n\n//* Main component of application *//\nexport default class SortingTimeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        // array holds height values, bars holds the actual divs\n        this.state = {\n            array: [],\n            bars: [],\n            algorithm: 'selection'\n        };\n        \n        this.cachedArray = [];\n        this.defaultLength = 60;\n        this.maxHeight = 550;\n        this.timerElement = React.createRef();\n    }\n\n    componentDidMount = () => {\n        // 85% of the distance between array container and menu\n        this.maxHeight = Math.floor(0.85 * (document.getElementById('bars-container').getBoundingClientRect().bottom -\n                                            document.getElementById('menu-container').getBoundingClientRect().bottom));\n    }\n    \n    // True if algorithm is currently running, false otherwise\n    setRunning = async bool => {\n        isRunning = bool;\n        this.timerElement.current.setStatus(bool);\n        if (bool) {\n            document.getElementById('execute').classList.add('running');\n        } else {\n            document.getElementById('execute').classList.remove('running');\n\n            // Fade back menu color\n            const menu = document.getElementById('menu-container');\n            const oldHue = getMenuHue();\n            if (oldHue === menuColors.blue.hue) {\n                return;\n            }\n            await wait(1000);\n            await fade(oldHue, menuColors.blue.hue);\n            const r = menuColors.blue.shadow.r, g = menuColors.blue.shadow.g, b = menuColors.blue.shadow.b\n            menu.style.setProperty('box-shadow', `-1.5px 1.5px 2.5px rgb(${r},${g},${b})`);\n        }            \n    }\n\n    // Compute reciprocal of interval to make the slider feel linear\n    speedChange = interval => {\n        animationInterval = interval < 5 ? 300 : 1500/interval - 15;\n    }\n\n    // Display a new randomized array, possibly with a new length\n    generateArray = length => {\n        const array = document.getElementsByClassName('array');\n        if (isRunning) {\n            this.setRunning(false);\n        }\n        let arraySize;\n        if (length) {\n            arraySize = length;\n            this.defaultLength = length;\n        } else {\n            arraySize = this.defaultLength;\n        }\n\n        // The constant values are arbitrary and were chosen because they look nice\n        const windowWidth = window.innerWidth;\n        const margin = Math.max((windowWidth) / (10 * arraySize), 1.5);\n        const width = Math.max((windowWidth - 100) / (1.75 * arraySize), 7);\n        const radius = Math.max(width / 10, 3);\n        \n        const newArray = [];\n        for (let i = 0; i < arraySize; i++) {\n            newArray.push(Math.floor(Math.random() * this.maxHeight + 25));\n        }\n        //const newArray = [ 15, 200, 150, 25, 300 ];\n        this.setState({\n            array: newArray,\n            bars: newArray.map((value, i) => <div className='array' key={i} idx={i} color={colors.green} type={undefined} style={{\n                height: value,\n                margin: margin,\n                width: width,\n                borderRadius: radius,\n            }} />)\n        });\n\n        // Deep copy to allow resetting to original state\n        this.cachedArray = [];\n        for (let i = 0; i < newArray.length; i++) {\n            this.cachedArray.push(newArray[i]);\n        }\n\n        // In case we are currently in execution\n        for (let i = 0; i < array.length; i++) {\n            array[i].style.backgroundColor = colors.green;\n        }\n    }\n\n    // Return bar heights and colors to pre-sorted state\n    resetArray = async () => {\n        cardFlip.play()\n        const array = document.getElementsByClassName('array');\n        const arraySize = array.length;\n\n        this.setRunning(false);\n\n        const oldArray = []\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.height = this.cachedArray[i] + \"px\";\n            array[i].type = undefined;\n            oldArray.push(this.cachedArray[i]);\n        }\n\n        this.setState({array: oldArray});\n        \n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.backgroundColor = \"#07ad1d\";\n        }\n        await wait(333);\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.backgroundColor = colors.green;\n        }\n    }\n\n    // Generates many large arrays, logs 'true' for each correct sort\n    testSort = mySort => {\n        const startTime = new Date();\n        for (let i = 0; i < 100; i++) {\n            const testArr = [];\n            const length = Math.floor(Math.random()*1001);\n            for (let j = 0; j < length; j++) {\n                testArr.push(Math.floor(Math.random()*501));\n            }\n            const testArr2 = [...testArr];\n    \n            mySort(testArr, 0, testArr.length - 1);\n            correctSort(testArr2);\n    \n            console.log(arrayEquality(testArr, testArr2));\n        }\n        const elapsedTime = new Date() - startTime;\n        console.log(\"Elapsed time: \", elapsedTime, \" ms\");\n    }\n\n    // Response to selecting algorithm from dropdown\n    selectAlgorithm = async selection => {\n        this.setState({ algorithm: selection });\n        if (!isRunning) {\n            const menu = document.getElementById('menu-container');\n            const oldHue = getMenuHue();\n            const newColor = algoColors[selection];\n            const r = newColor.shadow.r, g = newColor.shadow.g, b = newColor.shadow.b;\n            menu.style.setProperty('box-shadow', `-1.5px 1.5px 2.5px rgb(${r},${g},${b})`);\n            await fade(oldHue, newColor.hue);\n        }\n    }\n\n    // Runs selected algorithm\n    handleExecute = async () => {\n        if (isRunning) return;\n        cardFlip.play(0);\n        this.setRunning(true);\n\n        const array = this.state.array;\n        switch (this.state.algorithm) {\n            case 'selection': await animateSelectionSort(array); break;\n            case 'insertion': await animateInsertionSort(array); break;\n            case 'merge': await animateMergeSort(array); break;\n            case 'quick': await animateQuickSort(array); break;\n            case 'bubble': await animateBubbleSort(array); break;\n            case 'heap': await animateHeapSort(array); break;\n            case 'counting': await animateCountingSort(array); break;\n            default: await animateSelectionSort(array);\n        }\n\n        this.setRunning(false);\n    }\n\n    // Everything on screen is rendered here\n    render = () => {\n        return (\n            <div>\n                <div id='color-strip' />\n                <Menu onGenerate={this.generateArray} onReset={this.resetArray} onSpeedChange={this.speedChange} onExecute={this.handleExecute} onSelect={this.selectAlgorithm}/>\n                <div id='bars-container'>\n                    {this.state.bars}\n                    {/* Used for testing algorithms */}\n                    {/* <button id='test-sort' onClick={this.testSort.bind(this, countingAlgo)}>Test Sort</button> */}\n                </div>\n                <Timer status={isRunning} ref={this.timerElement}/>\n            </div>\n        )\n    }\n}\n\n\n//* Helpers *//\n// Effectively a synchronous sleep function\nexport const wait = ms => new Promise(res => setTimeout(res, ms));\n\n// For testing purposes\nconst correctSort = arr => arr.sort((a, b) => a - b);\n\n// Also for testing purposes\nconst arrayEquality = (a, b) => {\n\tif (a.length !== b.length) {\n        return false;\n    }\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// For menu color fading\nconst menuColors = {\n    blue:   { hue: 210, shadow: {r:9,   g:55, b:97} },\n    red:    { hue: 5,   shadow: {r:83,  g:7,  b:7} },\n    orange: { hue: 25,  shadow: {r:83,  g:37, b:6} },\n    yellow: { hue: 45,  shadow: {r:109, g:82, b:9} }\n};\n\nconst algoColors = {\n    'selection': menuColors.red,\n    'insertion': menuColors.red,\n    'merge': menuColors.orange,\n    'quick': menuColors.orange,\n    'bubble': menuColors.red,\n    'heap': menuColors.orange,\n    'counting': menuColors.yellow\n};\n\n// Linear interpolation\nconst lerp = (a,b,u) => (1-u) * a + u * b;\n\nconst fade = async (start, end) => {\n    const duration = 1000;\n    const interval = 10;\n    const step_u = 10 / duration;\n    const menu = document.getElementById('menu-container').style;\n    for (let u = 0.0; u < 1.0; u += step_u) {\n      const hue = parseInt(lerp(start, end, u));\n      menu.setProperty('background-color', `hsl(${hue}, 95%, 35%)`);\n      await wait(interval);\n    }\n};\n\nconst getMenuHue = () => {\n    const menu = document.getElementById('menu-container');\n    const currentColor = menu.style.backgroundColor.match(/\\d+/g)?.map(Number);\n    if (!currentColor) return menuColors.blue.hue;\n    const [r, g, b] = [currentColor[0]/255, currentColor[1]/255, currentColor[2]/255];\n    const max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let hue = 0;\n    if (max !== min) {\n        const d = max - min;\n        switch (max) {\n            case r: hue = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: hue = (b - r) / d + 2; break;\n            case b: hue = (r - g) / d + 4; break;\n            default: break;\n        }\n    }\n    return hue * 60;\n};\n\n// RGB Version\n// const fade = async (element, property, start, end, duration) => {\n//   const interval = 10;\n//   const step_u = interval / duration;\n//   console.log(step_u)\n//   for (let u = 0.0; u < 1.0; u += step_u) {\n//     const r = parseInt(lerp(start.r, end.r, u));\n//     const g = parseInt(lerp(start.g, end.g, u));\n//     const b = parseInt(lerp(start.b, end.b, u));\n//     element.style.setProperty(property, `rgb(${r},${g},${b})`);\n//     await wait(interval);\n//   }\n// };\n// const menuColors = {\n//     blue: { r:22, g:94, b:161, shadow:{r:12, g:65, b:116} },\n//     red: { r:170, g:8, b:8, shadow:{r:80, g:0, b:0} },\n//     orange: {r:194, g:108, b:11, shadow:{r:97, g:63, b:0} },\n//     yellow: {r:202, g:165, b:0, shadow:{r:73, g:66, b:0} }\n// };\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport SortingTimeVisualizer from './components/SortingTimeVisualizer';\nimport ReactGA from 'react-ga'; // https://github.com/react-ga/react-ga\n\n\nfunction App() {\n  // Google Analytics\n  useEffect(() => {\n    ReactGA.initialize('UA-174975160-2');\n    ReactGA.pageview(window.location.pathname);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <SortingTimeVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}