{"version":3,"sources":["resources/card-flip.wav","components/Menu.js","components/SortingTimeVisualizer.js","algorithms/SelectionSort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","props","state","algorithm","selectedAlgorithm","document","getElementById","value","this","onExecute","id","className","onClick","handleExecute","React","Component","cardFlip","UIfx","cardFlipWav","throttleMs","SortingTimeVisualizer","array","bind","bars","animationSpeed","arrayLength","arrayHeight","newArr","i","push","Math","floor","random","setState","map","element","style","height","key","index","animations","arr","minIdx","temp","length","j","getSelectionSortAnims","arrayBars","getElementsByClassName","setTimeout","index1","index2","play","backgroundColor","color","type","console","log","mySort","testArr","testArr2","sort","a","b","arrayEquality","animateSelectionSort","animateInsertionSort","animateMergeSort","animateQuickSort","arr1","arr2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28113ae9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-flip.a45353c2.wav\";","import React from 'react';\nimport './Menu.css';\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithm: \"selection\"\n        }\n    }\n\n    handleExecute() {\n        const selectedAlgorithm = document.getElementById(\"menu-select\").value;\n        this.props.onExecute(selectedAlgorithm);\n    }\n\n    render() {\n        return (\n            <div id=\"menu-container\">\n                <div className=\"menu-button\" id=\"selection-sort\" onClick={this.handleExecute}>New Array</div>\n                <select className=\"menu-select\" id=\"menu-select\" >\n                    <option value=\"selection\">Selection Sort</option>\n                    <option value=\"insertion\">Insertion Sort</option>\n                    <option value=\"merge\">Merge Sort</option>\n                    <option value=\"quick\">Quicksort</option>\n                </select>\n                <div className=\"menu-button\" id=\"execute\" onClick={() => this.handleExecute()}>Execute</div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Menu from './Menu';\nimport './SortingTimeVisualizer.css';\nimport {getSelectionSortAnims} from '../algorithms/SelectionSort';\nimport UIfx from '../../node_modules/uifx';\nimport cardFlipWav from '../resources/card-flip.wav';\n\n\n\nconst purple = \"#8a2be2\";\nconst red = \"#dc143c\";\nconst green = \"#24682d\";\nconst yellow = \"#ffff00\";\n\nconst cardFlip = new UIfx(cardFlipWav, { throttleMs: 5 });\n\nexport default class SortingTimeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array : [], // holds height values\n        };\n        \n        this.handleExecute = this.handleExecute.bind(this);\n\n        this.bars = [];\n        this.animationSpeed = 100;\n        this.arrayLength = 25;\n        this.arrayHeight = 400;\n\n    }\n    \n    // initialize array to random values\n    componentDidMount() {\n        const newArr = []\n        for (let i = 0; i < this.arrayLength; i++) {\n            newArr.push(Math.floor(Math.random()*this.arrayHeight + 15))\n        }\n        // const newArr = [\n        //     306, 419,  14, 452, 378, 456,\n        //     251, 416, 440, 148, 101, 173,\n        //     167, 10, 225, 445, 20, 462,\n        //     107, 156, 276, 506, 189, 15,\n        //     201\n        // ]\n        this.setState({ array: newArr})\n        this.bars = newArr.map((element, i) => <div className=\"array\" style={{height: element}} key={i} index={i} />)\n    }\n\n    // get animations and put them on the screen in order\n    animateSelectionSort() {\n        const array = this.state.array;\n        const animations = getSelectionSortAnims(array)\n        const arrayBars = document.getElementsByClassName(\"array\")\n        // console.log(animations)\n\n        for (let i = 0; i < animations.length; i++) {\n            if (animations[i][0] === null) {\n                setTimeout(() => {}, (i + 1) * this.animationSpeed)\n                setTimeout(() => {}, (i + 2) * this.animationSpeed)\n            }\n            // swapping animations[i][0] and animations[i][1]\n            else if (typeof animations[i][1] === \"number\") {\n                const [index1, index2] = animations[i];\n\n                setTimeout(() => {\n                    cardFlip.play();\n                    arrayBars[index1].style.backgroundColor = yellow;\n                    arrayBars[index2].style.backgroundColor = yellow;\n                }, i * this.animationSpeed)\n\n                setTimeout(() => {\n                    const temp = arrayBars[index1].style.height;\n                    arrayBars[index1].style.height = arrayBars[index2].style.height;\n                    arrayBars[index2].style.height = temp;\n                }, (i + 1) * this.animationSpeed)\n\n                setTimeout(() => {\n                    arrayBars[index1].style.backgroundColor = purple;\n                    arrayBars[index2].style.backgroundColor = green;\n                }, (i + 2) * this.animationSpeed)\n            }\n            // coloring the bar to represent comparison\n            else {\n                const [index, color, type] = animations[i];\n                setTimeout(() => {\n                    arrayBars[index].style.backgroundColor = color;\n                    arrayBars[index].type = type;\n                    if (color === red) {\n                        setTimeout(() => {\n                            arrayBars[index].style.backgroundColor = green;\n                        }, this.animationSpeed);\n                    }\n                    else if (color === purple) {\n                        for (let j = index - 1; j > 0; j--) {\n                            if (arrayBars[j].type === \"base\") {\n                                break;\n                            }\n                            if (arrayBars[j].style.backgroundColor === \"rgb(138, 43, 226)\") { //purple\n                                arrayBars[j].style.backgroundColor = green;\n                                break;\n                            }\n                        }\n                    }\n                }, i * this.animationSpeed);\n            }\n        }\n        setTimeout(() => {\n            arrayBars[arrayBars.length - 1].style.backgroundColor = purple;\n        }, this.animationSpeed * animations.length)\n        \n\n        for (let i = 0; i < arrayBars.length; i++) {\n            setTimeout(() => {\n                arrayBars[i].style.backgroundColor = green;\n            }, this.animationSpeed * (0.25 * i + animations.length))\n            \n        }\n    }\n\n    animateInsertionSort() {\n        console.log(\"Todo: Insertion sort\")\n    }\n\n    animateMergeSort() {\n        console.log(\"Todo: Merge sort\")\n    }\n\n    animateQuickSort() {\n        console.log(\"Todo: Quicksort\")\n    }\n\n    // generates many large arrays, logs \"true\" for each correct sort\n    testSort(mySort) {\n        for (let i = 0; i < 1000; i++) {\n            const testArr = [];\n            for (let j = 0; j < 1000; j++) {\n                testArr.push(Math.floor(Math.random()*500 + 20))\n            }\n            const testArr2 = [...testArr];\n    \n            mySort(testArr);\n            correctSort(testArr2);\n    \n            console.log(arrayEquality(testArr, testArr2));\n        }\n    }\n\n    handleExecute(algorithm) {\n        switch(algorithm) {\n            case 'selection':\n                this.animateSelectionSort();\n                break;\n            case 'insertion':\n                this.animateInsertionSort();\n                break;\n            case 'merge':\n                this.animateMergeSort();\n                break;\n            case 'quick':\n                this.animateQuickSort();\n                break;\n            default:\n                this.animateSelectionSort();\n                break;\n        }\n        \n    }\n\n    // everything rendered on screen is here\n    render() {\n        return (\n            <div>\n                <div id=\"color-strip\" />\n                <Menu onExecute={this.handleExecute}/>\n                <div id=\"bars-container\">\n                    {this.bars}\n                    {/* <button id=\"test-sort\" onClick={this.testSort.bind(this, selectionSortAlgo)}>Test Sort</button> */}\n                </div>\n            </div>\n        )\n    }\n}\n\n// for testing purposes\nfunction correctSort(arr) {\n    return arr.sort((a, b) => a - b);\n}\n\n// checks if two arrays are equal (for testing)\nfunction arrayEquality(arr1, arr2) {\n\tif (arr1.length !== arr2.length) {\n        return false;\n    }\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};","\nconst purple = \"#8a2be2\";\nconst red = \"#dc143c\";\n\n// export function getAnimations(arr) {\n//     const animations = []\n//     for (let i = 0; i < arr.length; i+=3) {\n//         animations.push([i, purple]);\n//     }\n//     for (let i = 0; i < arr.length; i+=5) {\n//         animations.push([i, red]);\n//     }\n//     return animations;\n// }\n\nexport function getSelectionSortAnims(arr) {\n    let minIdx, temp;\n    const animations = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        minIdx = i;\n        // arr[i] = purple\n        animations.push([i, purple, \"base\"])\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n                // arr[j] = purple\n                animations.push([j, purple])\n            }\n            else {\n                // arr[j] = red\n                animations.push([j, red])\n            }\n        }\n\n        if (minIdx > i) {\n            temp = arr[minIdx];\n            arr[minIdx] = arr[i];\n            arr[i] = temp;\n            // swap heights a[i], a[minIdx]\n            animations.push([i, minIdx]);\n            animations.push([null]);\n            animations.push([null]);\n        }\n    }\n\n    return animations;\n}\n\n// function selectionSortAlgo(arr) {\n//     let minIdx, temp;\n    \n//     for (let i = 0; i < arr.length; i++) {\n//         minIdx = i;\n//         for (let j = i + 1; j < arr.length; j++) {\n//             if (arr[j] < arr[minIdx]) {\n//                 minIdx = j;\n//             }\n//         }\n\n//         if (minIdx > i) {\n//             temp = arr[minIdx];\n//             arr[minIdx] = arr[i];\n//             arr[i] = temp;\n//         }\n//     }\n\n//     return arr;\n// }\n","import React from 'react';\nimport './App.css';\nimport SortingTimeVisualizer from './components/SortingTimeVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingTimeVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}