{"version":3,"sources":["resources/card-flip.mp3","components/LengthSlider.js","components/SpeedSlider.js","components/Menu.js","components/Timer.js","algorithms/Quick.js","animations/QuickAnimation.js","algorithms/Selection.js","animations/SelectionAnimation.js","algorithms/Insertion.js","animations/InsertionAnimation.js","algorithms/Merge.js","animations/MergeAnimation.js","components/SortingTimeVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","color","input","backgroundColor","borderRadius","LengthSlider","props","classes","React","useState","value","setValue","useEffect","onSlide","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","min","max","style","onChange","event","newValue","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","type","textAlign","disableUnderline","SpeedSlider","Menu","state","algorithm","interval","this","onSpeedChange","length","onGenerate","onReset","selectedAlgorithm","document","getElementById","onExecute","onClick","handleGenerate","handleReset","handleSpeedChange","handleExecute","Component","Timer","startTimer","setState","status","timeStart","Date","now","time","timer","setInterval","stopTimer","clearInterval","resetTimer","setStatus","bool","setTimeout","centiseconds","Math","floor","slice","seconds","minutes","version","xmlns","viewBox","enableBackground","d","getQuickAnimations","arr","left","right","animations","index","pivotIdx","pivot","push","i","j","temp","partitionAnimate","animateQuickSort","stateArray","a","getElementsByClassName","sort","b","isRunning","cardFlip","play","idx","colors","red","wait","animationInterval","idx1","idx2","yellow","height","value1","parseInt","value2","purple","blue","green","getSelectionAnimations","minIdx","animateSelectionSort","undefined","getInsertionAnimations","temp2","animateInsertionSort","gradients","3","1","2","4","8","5","16","6","32","7","64","getMergeAnimations","level","ceil","log2","mergeAnimate","end","k","animateMergeSort","UIfx","cardFlipMp3","throttleMs","SortingTimeVisualizer","setRunning","timerElement","current","speedChange","generateArray","arraySize","array","defaultLength","windowWidth","window","innerWidth","radius","maxHeight","getBoundingClientRect","bottom","newArray","random","bars","map","key","cachedArray","resetArray","oldArray","testSort","mySort","startTime","testArr","testArr2","correctSort","console","log","arrayEquality","elapsedTime","render","ref","createRef","ms","Promise","res","App","ReactGA","initialize","pageview","location","pathname","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e72bed8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-flip.2317ec81.mp3\";","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport './Menu.css';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n  },\n  input: {\n    width: 50,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n    backgroundColor: 'rgba(100%, 100%, 100%, 20%)',\n    borderRadius: '10px',\n  },\n});\n\nexport default function LengthSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(25);\n\n  useEffect(() => {\n    if (value < 5) {\n      props.onSlide(5);\n    } else if (value > 125) {\n      props.onSlide(125);\n    } else {\n      props.onSlide(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 5) {\n      setValue(5);\n    } else if (value > 125) {\n      setValue(125);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='input-slider' gutterBottom >\n        Array Length\n      </Typography >\n      <Grid container spacing={2} alignItems='center'>\n        <Grid item xs>\n          <Slider\n            min={5}\n            max={125}\n            style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}}\n            value={typeof value === 'number' ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby='input-slider'\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin='dense'\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 5,\n              max: 125,\n              type: 'number',\n              'aria-labelledby': 'input-slider',\n              style: {textAlign: 'center', color: 'white'},\n            }}\n            disableUnderline\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 220,\n    color: 'rgba(100%, 100%, 100%, 82.5%)'\n  },\n});\n\n// sets the time interval between animation frames\nexport default function SpeedSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(10);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => props.onSlide(value), [value]);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='continuous-slider' gutterBottom>\n        Sorting Speed\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item>\n        </Grid>\n        <Grid item xs>\n          <Slider value={value} onChange={handleChange} style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}} aria-labelledby='continuous-slider' />\n        </Grid>\n        <Grid item>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport LengthSlider from './LengthSlider';\nimport SpeedSlider from './SpeedSlider';\nimport './Menu.css';\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithm: 'selection'\n        }\n    }\n\n    handleSpeedChange(interval) {\n        this.props.onSpeedChange(interval);\n    }\n\n    handleGenerate(length) {\n        this.props.onGenerate(length);\n    }\n    \n    handleReset() {\n        this.props.onReset();\n    }\n\n    handleExecute() {\n        const selectedAlgorithm = document.getElementById('menu-select').value;\n        this.props.onExecute(selectedAlgorithm);\n    }\n\n    render() {\n        return (\n            <div id='menu-container'>\n                <div className='menu-item' id='selection-sort' onClick={() => this.handleGenerate()}>New Array</div>\n                <div className='menu-item' id='selection-sort' onClick={() => this.handleReset()}>Reset Array</div>\n                <SpeedSlider onSlide={interval => this.handleSpeedChange(interval)} />\n                <LengthSlider onSlide={length => this.handleGenerate(length)} />\n                <select className='menu-item' id='menu-select' >\n                    <option value='selection'>Selection Sort</option>\n                    <option value='insertion'>Insertion Sort</option>\n                    <option value='merge'>Merge Sort</option>\n                    <option value='quick'>Quicksort</option>\n                    {/* <option value='bubble'>Bubble Sort</option>\n                    <option value='heap'>Heapsort</option> */}\n                </select>\n                <div className='menu-item' id='execute' onClick={() => this.handleExecute()}>Execute</div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n// import './Menu.css';\nimport './SortingTimeVisualizer.css';\n// https://github.com/peterdurham/timers-demo\n\nexport default class Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: this.props.status,\n            timeStart: 0,\n            time: 0\n        };\n    }\n\n    startTimer = () => {\n        this.setState({\n            status: true,\n            timeStart: Date.now() - this.state.time,\n            time: this.state.time\n        });\n        this.timer = setInterval(() => {\n            this.setState({ time: Date.now() - this.state.timeStart });\n        }, 10);\n    }\n\n    stopTimer = () => {\n        this.setState({\n            status: false,\n        });\n        clearInterval(this.timer);\n    }\n\n    resetTimer = () => {\n        this.setState({\n            timeStart: 0,\n            time: 0\n        });\n    }\n\n    setStatus = bool => {\n        if (bool) {\n            if (this.state.status) return;\n            this.resetTimer();\n            setTimeout(() => this.startTimer(), 0);\n        }\n        else {\n            this.stopTimer();\n        }\n    }\n    \n    render() {\n        const { time } = this.state;\n        const centiseconds = (\"0\" + (Math.floor(time / 10) % 100)).slice(-2);\n        const seconds = (\"0\" + (Math.floor(time / 1000) % 60)).slice(-2);\n        const minutes = (\"0\" + (Math.floor(time / 60000) % 60)).slice(-2);\n      return (\n        <span id=\"timer-container\">\n            <span className=\"timer timer-icon\">\n                <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 296.228 296.228\" enableBackground=\"new 0 0 296.228 296.228\">\n                    <g>\n                        <path d=\"m167.364,48.003v-23.003h10.5c6.903,0 12.5-5.597 12.5-12.5s-5.596-12.5-12.5-12.5h-59.5c-6.903,0-12.5,5.597-12.5,12.5s5.597,12.5 12.5,12.5h10.5v23.003c-59.738,9.285-105.604,61.071-105.604,123.37-3.55271e-15,68.845 56.01,124.854 124.854,124.854s124.854-56.01 124.854-124.854c0-62.299-45.866-114.085-105.604-123.37zm-19.25,223.225c-55.06,0-99.854-44.795-99.854-99.854s44.795-99.854 99.854-99.854 99.854,44.795 99.854,99.854-44.794,99.854-99.854,99.854z\"/>\n                        <path d=\"m160.614,166.18v-58.889c0-6.903-5.597-12.5-12.5-12.5s-12.5,5.597-12.5,12.5v66.1c0,2.033 0.81,3.982 2.25,5.416l34.969,34.822c4.893,4.872 12.806,4.854 17.678-0.037 4.871-4.892 4.854-12.807-0.037-17.678l-29.86-29.734z\"/>\n                    </g>\n                </svg>\n            </span>\n            <span className=\"timer timer-display\">\n                <span id=\"seconds\">{minutes}:{seconds}</span>\n                <span id=\"centiseconds\">{centiseconds}</span>\n            </span>\n        </span>\n      );\n    }\n  }\n","export default function getQuickAnimations(arr, left, right, animations) {\n    let index;\n    if (arr.length > 1) {\n        index = partitionAnimate(arr, left, right, animations);\n        if (left < index - 1) {\n            getQuickAnimations(arr, left, index - 1, animations);\n        }\n        if (index < right) {\n            getQuickAnimations(arr, index, right, animations);\n        }\n    }\n    return animations;\n}\n\nfunction partitionAnimate(arr, left, right, animations) {\n    const pivotIdx = Math.floor((right + left) / 2)\n    const pivot = arr[pivotIdx];\n    animations.push([pivotIdx])\n    \n    let i = left;\n    let j = right;\n\n    while (i <= j) {\n        while (arr[i] < pivot) {\n            i++;\n        }\n        while (arr[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            const temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            animations.push([i, j])\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\n\n// export function quickAlgo(arr, left, right) {\n//     let index;\n//     if (arr.length > 1) {\n//         index = partition(arr, left, right);\n//         if (left < index - 1) { // more elements on the left side of the pivot\n//             quickAlgo(arr, left, index - 1);\n//         }\n//         if (index < right) { // more elements on the right side of the pivot\n//             quickAlgo(arr, index, right);\n//         }\n//     }\n//     return arr;\n// }\n\n// function partition(arr, left, right) {\n//     const pivot = arr[Math.floor((right + left) / 2)];\n    \n//     let i = left;\n//     let j = right;\n\n//     while (i <= j) {\n//         while (arr[i] < pivot) {\n//             i++;\n//         }\n//         while (arr[j] > pivot) {\n//             j--;\n//         }\n//         if (i <= j) {\n//             const temp = arr[i];\n//             arr[i] = arr[j];\n//             arr[j] = temp;\n//             i++;\n//             j--;\n//         }\n//     }\n//     return i;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getQuickAnimations from '../algorithms/Quick';\n\nexport default async function animateQuickSort(stateArray) {\n    const animations = getQuickAnimations(stateArray, 0, stateArray.length - 1, []);\n    const arr = document.getElementsByClassName('array');\n    stateArray.sort((a, b) => a - b);\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n\n        if (animations[i].length === 1) {\n            cardFlip.play();\n            const [idx] = animations[i];\n\n            arr[idx].style.backgroundColor = colors.red;\n            await wait(animationInterval + 10);\n        }\n        else {\n            const [idx1, idx2] = animations[i];\n\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval + 10);\n\n            const temp = arr[idx1].style.height;\n            arr[idx1].style.height = arr[idx2].style.height;\n            arr[idx2].style.height = temp;\n            await wait(animationInterval + 10);\n\n            const value1 = parseInt(arr[idx1].style.height.slice(0, -2));\n            const value2 = parseInt(arr[idx2].style.height.slice(0, -2));\n            arr[idx1].style.backgroundColor = value1 === stateArray[idx1] ? colors.purple : colors.blue;\n            arr[idx2].style.backgroundColor = value2 === stateArray[idx2] ? colors.purple : colors.blue;\n            await wait(animationInterval + 10);\n        }\n    }\n    \n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(0.5 * (animationInterval + 10));\n    }\n}\n","const purple = '#8a2be2';\nconst red = '#dc143c';\n\nexport default function getSelectionAnimations(arr) {\n    let minIdx, temp;\n    const animations = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        minIdx = i;\n        // arr[i] = purple\n        animations.push([i, purple, 'sorted'])\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n                // arr[j] = purple\n                animations.push([j, purple])\n            }\n            else {\n                // arr[j] = red\n                animations.push([j, red])\n            }\n        }\n\n        if (minIdx > i) {\n            temp = arr[minIdx];\n            arr[minIdx] = arr[i];\n            arr[i] = temp;\n            // swap heights a[i], a[minIdx]\n            animations.push([i, minIdx]);\n        }\n    }\n\n    return animations;\n}\n\n\n\n// export function selectionAlgo(arr) {\n//     let minIdx, temp;\n    \n//     for (let i = 0; i < arr.length; i++) {\n//         minIdx = i;\n//         for (let j = i + 1; j < arr.length; j++) {\n//             if (arr[j] < arr[minIdx]) {\n//                 minIdx = j;\n//             }\n//         }\n\n//         if (minIdx > i) {\n//             temp = arr[minIdx];\n//             arr[minIdx] = arr[i];\n//             arr[i] = temp;\n//         }\n//     }\n\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getSelectionAnimations from '../algorithms/Selection';\n\nexport default async function animateSelectionSort(stateArray) {\n    const animations = getSelectionAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n    \n    // first bar will be purple (current min)\n    arr[0].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n    \n    for (let i = 1; i < animations.length; i++) {\n        if (!isRunning) return;\n        // swapping animations[i][0] and animations[i][1]\n        if (typeof animations[i][1] === 'number') {\n            cardFlip.play();\n            // the last arraybar is currently colors.red, change it back\n            arr[animations[i - 1][0]].style.backgroundColor = colors.green;\n            const [idx1, idx2] = animations[i];\n\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            const temp = arr[idx1].style.height;\n            arr[idx1].style.height = arr[idx2].style.height;\n            arr[idx2].style.height = temp;\n            await wait(animationInterval);\n\n            arr[idx1].style.backgroundColor = colors.purple;\n            arr[idx2].style.backgroundColor = colors.green;\n            await wait(animationInterval);\n        }\n        // coloring a bar red or purple to indicate comparison\n        else {\n            const [idx, color, type] = animations[i];\n            arr[idx].style.backgroundColor = color;\n            arr[idx].type = type;\n\n            if (animations[i - 1][1] === colors.red) {\n                arr[animations[i - 1][0]].style.backgroundColor = colors.green;\n            }\n            // if is the new min, reset the last min\n            if (color === colors.purple) {\n                for (let j = idx - 1; j > 0; j--) {\n                    if (arr[j].type === 'sorted') {\n                        break;\n                    }\n                    if (arr[j].style.backgroundColor === 'rgb(138, 43, 226)') { //purple\n                        arr[j].style.backgroundColor = colors.green;\n                        break;\n                    }\n                }\n            }\n            await wait(animationInterval);\n        }\n    }\n    \n    arr[arr.length - 1].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[i].type = undefined;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].type = undefined;\n        await wait(0.5 * animationInterval);\n    }\n}\n","const purple = '#8a2be2';\n\nexport default function getInsertionAnimations(arr) {\n    const animations = [];\n\n    for (let i = 1; i < arr.length; i++) {\n        let j = i - 1;\n        const temp = arr[i];\n        animations.push([i, purple])\n        while (j >= 0 && arr[j] > temp) {\n            const temp2 = arr[j+1]\n            arr[j+1] = arr[j];\n            arr[j] = temp2;\n            animations.push([j, j + 1])\n            j--;\n        }\n    }\n\n    return animations;\n}\n\n\n\n// // Algo w/ more swapping for better visual\n// export function insertionAlgo(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             const temp2 = arr[j+1]\n//             arr[j+1] = arr[j];\n//             arr[j] = temp2;\n//             j--;\n//         }\n//     }\n//     return arr;\n// }\n\n// // More efficient version - less swapping\n// export function insertionAlgo2(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             arr[j+1] = arr[j];\n//             j--;\n//         }\n//         arr[j+1] = temp;\n//     }\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getInsertionAnimations from '../algorithms/Insertion';\n\nexport default async function animateInsertionSort(stateArray) {\n    const animations = getInsertionAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    // first bar will be purple (current min)\n    arr[0].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n    \n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) {\n            for (let i = 0; i < arr.length; i++) {\n                arr[i].style.backgroundColor = colors.green;\n            }\n            return;\n        }\n\n        // swapping\n        if (typeof animations[i][1] === 'number') {\n            const [idx1, idx2] = animations[i];\n            \n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.red;\n            await wait(animationInterval);\n\n            const temp = arr[idx1].style.height;\n            arr[idx1].style.height = arr[idx2].style.height;\n            arr[idx2].style.height = temp;\n            arr[idx1].style.backgroundColor = colors.red;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            arr[idx2].style.backgroundColor = colors.purple;\n            if (i === animations.length - 1 || typeof animations[i + 1][1] !== 'number') {\n                cardFlip.play();\n                await wait(animationInterval);\n                arr[idx1].style.backgroundColor = colors.purple;\n            }\n        }\n        // coloring\n        else {\n            const [idx, color] = animations[i];\n            arr[idx].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n    }\n\n    await wait(animationInterval);\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(0.5 * animationInterval);\n    }\n}\n","const purple = '#8a2be2';\n\nconst gradients = {\n  3: { 1: '#00747f', 2: '#0073e7', 4: purple },\n  4: { 1: '#007264', 2: '#0076b8', 4: '#006cf5', 8: purple },\n  5: { 1: '#007056', 2: '#007596', 4: '#0075d7', 8: '#0066f9', 16: purple },\n  6: { 1: '#006f4d', 2: '#00747f', 4: '#0076b8', 8: '#0073e7', 16: '#0061fa', 32: purple },\n  7: { 1: '#006e47', 2: '#00736f', 4: '#0076a0', 8: '#0076cf', 16: '#0070f0', 32: '#005df9', 64: purple }\n};\n\nexport default function getMergeAnimations(a) {\n  const animations = [], b = [];\n  const level = Math.ceil(Math.log2(a.length))\n\n  for (let width = 1; width < a.length; width *= 2) {\n    const color = gradients[level][width];\n    animations.push(null);\n    \n    for (let i = 0; i < a.length; i += 2 * width) {\n      mergeAnimate(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b, animations, color);\n    }\n    for (let i = 0; i < a.length; i++) {\n      a[i] = b[i];\n    }\n  }\n  return animations\n}\n\nfunction mergeAnimate(a, left, right, end, b, animations, color) {\n  let i = left, j = right;\n  for (let k = left; k < end; k++) {\n    if (i < right && (j >= end || a[i] <= a[j])) {\n      animations.push([color, i]);\n      b[k] = a[i++];\n    }\n    else {\n      animations.push([color, k, j]);\n      b[k] = a[j++];\n    }\n  }\n}\n\n\n\n// export function mergeAlgo(a) {\n//   const b = [];\n\n//   for (let width = 1; width < a.length; width *= 2) {\n//     for (let i = 0; i < a.length; i += 2 * width) {\n//       merge(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b);\n//     }\n//     for (let i = 0; i < a.length; i++) {\n//       a[i] = b[i];\n//     }\n//   }\n\n//   return a\n// }\n\n// function merge(a, left, right, end, b) {\n//   let i = left, j = right;\n  \n//   for (let k = left; k < end; k++) {\n//     if (i < right && (j >= end || a[i] <= a[j])) {\n//       b[k] = a[i++];\n//     }\n//     else {\n//       b[k] = a[j++];\n//     }\n//   }\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getMergeAnimations from '../algorithms/Merge';\n\nexport default async function animateMergeSort(stateArray) {\n    const animations = getMergeAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n\n        if (!animations[i]) {\n            cardFlip.play();\n            continue;\n        }\n\n        const color = animations[i][0];\n        if (animations[i].length === 3) {\n            const [, idx1, idx2] = animations[i];\n\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            const temp = arr[idx2].style.height;\n            for (let i = idx2; i > idx1; i--) {\n                arr[i].style.height = arr[i - 1].style.height;\n            }\n            arr[idx1].style.height = temp;\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = color;\n            await wait(animationInterval);\n\n            arr[idx1].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n        else {\n            const [, idx] = animations[i];\n            arr[idx].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            arr[idx].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n    }\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(0.5 * animationInterval);\n    }\n}\n","import React from 'react';\nimport Menu from './Menu';\nimport Timer from './Timer';\nimport UIfx from '../../node_modules/uifx';\nimport cardFlipMp3 from '../resources/card-flip.mp3';\nimport './SortingTimeVisualizer.css';\n\nimport animateQuickSort from '../animations/QuickAnimation';\nimport animateSelectionSort from '../animations/SelectionAnimation';\nimport animateInsertionSort from '../animations/InsertionAnimation';\nimport animateMergeSort from '../animations/MergeAnimation';\n\n\n// not very React-y, but these are only passed to animation/algorithm scripts that execute the sort\nexport let isRunning = false;\nexport let animationInterval = 0;\nexport const cardFlip = new UIfx(cardFlipMp3, { throttleMs: 60 });\nexport const colors = {\n    purple: '#8a2be2',\n    red: '#dc143c',\n    green: '#24682d',\n    yellow: '#ffff00',\n    blue: '#0076b8'\n};\n\n\n// main component of application\nexport default class SortingTimeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        // array holds height values, bars holds the actual divs\n        this.state = { array: [], bars: [], };\n        \n        this.cachedArray = [];\n        this.defaultLength = 60;\n        this.maxHeight = 550;\n        this.timerElement = React.createRef();\n    }\n    \n    // true if algorithm is currently running, false otherwise\n    setRunning = bool => {\n        isRunning = bool;\n        this.timerElement.current.setStatus(bool);\n    }\n\n    // compute reciprocal of interval to make the slider feel linear\n    speedChange = interval => {\n        animationInterval = interval < 5 ? 300 : 1500/interval - 15;\n    }\n\n    // display a new randomized array, possibly with a new length\n    generateArray = length => {\n        const array = document.getElementsByClassName('array');\n        this.setRunning(false);\n        let arraySize;\n        if (length) {\n            arraySize = length;\n            this.defaultLength = length;\n        } else {\n            arraySize = this.defaultLength;\n        }\n\n        const windowWidth = window.innerWidth;\n        const margin = Math.max((windowWidth) / (10 * arraySize), 1.5);\n        const width = Math.max((windowWidth - 100) / (1.75 * arraySize), 7);\n        const radius = Math.max(width / 10, 3);\n\n        // 85% of the distance between array container and menu\n        this.maxHeight = 0.85 * (document.getElementById('bars-container').getBoundingClientRect().bottom -\n                                 document.getElementById('menu-container').getBoundingClientRect().bottom);\n        \n        const newArray = [];\n        for (let i = 0; i < arraySize; i++) {\n            newArray.push(Math.floor(Math.random()*this.maxHeight + 25));\n        }\n        // const newArray = [ 15, 200, 150, 25, 300 ];\n        this.setState({\n            array: newArray,\n            bars: newArray.map((value, i) => <div className='array' key={i} idx={i} color={colors.green} type={undefined} style={{\n                height: value,\n                margin: margin,\n                width: width,\n                borderRadius: radius,\n                // borderTopLeftRadius: topRadius, borderTopRightRadius: topRadius,\n                // borderBottomLeftRadius: bottomRadius, borderBottomRightRadius: bottomRadius,\n            }} />)\n        });\n\n        // deep copy to allow resetting to original state\n        this.cachedArray = [];\n        for (let i = 0; i < newArray.length; i++) {\n            this.cachedArray.push(newArray[i]);\n        }\n\n        // in case we are currently in execution\n        for (let i = 0; i < array.length; i++) {\n            array[i].style.backgroundColor = colors.green;\n        }\n    }\n\n    // return bar heights and colors to pre-sorted state\n    resetArray = async () => {\n        const array = document.getElementsByClassName('array');\n        const arraySize = array.length;\n\n        this.setRunning(false);\n\n        const oldArray = []\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.height = this.cachedArray[i] + \"px\";\n            array[i].type = undefined;\n            oldArray.push(this.cachedArray[i]);\n        }\n\n        this.setState({array: oldArray});\n        \n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.backgroundColor = \"#07ad1d\";\n        }\n        await wait(333);\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.backgroundColor = colors.green;\n        }\n    }\n\n    // generates many large arrays, logs 'true' for each correct sort\n    testSort = mySort => {\n        const startTime = new Date();\n        for (let i = 0; i < 100; i++) {\n            const testArr = [];\n            const length = Math.floor(Math.random()*1001);\n            for (let j = 0; j < length; j++) {\n                testArr.push(Math.floor(Math.random()*501));\n            }\n            const testArr2 = [...testArr];\n    \n            mySort(testArr, 0, testArr.length - 1);\n            correctSort(testArr2);\n    \n            console.log(arrayEquality(testArr, testArr2));\n        }\n        const elapsedTime = new Date() - startTime;\n        console.log(\"Elapsed time: \", elapsedTime, \" ms\");\n    }\n\n    // runs selected algorithm from dropdown\n    handleExecute = async algorithm => {\n        if (isRunning) return;\n        this.setRunning(true);\n\n        if (algorithm === 'selection')\n            await animateSelectionSort(this.state.array);\n        else if (algorithm === 'insertion')\n            await animateInsertionSort(this.state.array);\n        else if (algorithm === 'merge')\n            await animateMergeSort(this.state.array);\n        else if (algorithm === 'quick')\n            await animateQuickSort(this.state.array);\n        // else if (algorithm === 'bubble')\n        //     this.animateBubbleSort();\n        // else\n        //     this.animateHeapSort();\n\n        this.setRunning(false);\n    }\n\n    // everything on screen is rendered here\n    render = () => {\n        return (\n            <div>\n                <div id='color-strip' />\n                <Menu onGenerate={this.generateArray} onReset={this.resetArray} onSpeedChange={this.speedChange} onExecute={this.handleExecute} />\n                <div id='bars-container'>\n                    {this.state.bars}\n                    {/* <button id='test-sort' onClick={this.testSort.bind(this, quickAlgo)}>Test Sort</button> */}\n                </div>\n                <Timer status={isRunning} ref={this.timerElement}/>\n            </div>\n        )\n    }\n}\n\n\n// effectively a synchronous sleep function\nexport const wait = ms => new Promise(res => setTimeout(res, ms));\n\n// for testing purposes\nconst correctSort = arr => arr.sort((a, b) => a - b);\n\n// also for testing purposes\nconst arrayEquality = (a, b) => {\n\tif (a.length !== b.length) {\n        return false;\n    }\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport SortingTimeVisualizer from './components/SortingTimeVisualizer';\nimport ReactGA from 'react-ga'; // https://github.com/react-ga/react-ga\n\n\nfunction App() {\n  // Google Analytics\n  useEffect(() => {\n    ReactGA.initialize('UA-171800090-2');\n    ReactGA.pageview(window.location.pathname);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <SortingTimeVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}