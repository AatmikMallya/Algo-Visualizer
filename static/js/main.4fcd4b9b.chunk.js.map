{"version":3,"sources":["resources/card-flip.mp3","components/LengthSlider.js","components/SpeedSlider.js","components/Menu.js","algorithms/Quick.js","animations/QuickAnimation.js","algorithms/Selection.js","animations/SelectionAnimation.js","algorithms/Insertion.js","animations/InsertionAnimation.js","algorithms/Merge.js","animations/MergeAnimation.js","components/SortingTimeVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","color","input","backgroundColor","borderRadius","LengthSlider","props","classes","React","useState","value","setValue","useEffect","onSlide","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","min","max","style","onChange","event","newValue","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","type","textAlign","SpeedSlider","Menu","state","algorithm","interval","this","onSpeedChange","length","onGenerate","onReset","selectedAlgorithm","document","getElementById","onExecute","onClick","handleGenerate","handleReset","handleSpeedChange","handleExecute","Component","getQuickAnimations","arr","left","right","animations","index","pivotIdx","Math","floor","pivot","push","i","j","temp","partitionAnimate","animateQuickSort","stateArray","a","getElementsByClassName","sort","b","isRunning","cardFlip","play","idx","colors","red","wait","animationInterval","idx1","idx2","yellow","height","value1","parseInt","slice","value2","purple","blue","green","getSelectionAnimations","minIdx","animateSelectionSort","undefined","getInsertionAnimations","temp2","animateInsertionSort","gradients","3","1","2","4","8","5","16","6","32","7","64","getMergeAnimations","level","ceil","log2","mergeAnimate","end","k","animateMergeSort","UIfx","cardFlipMp3","throttleMs","SortingTimeVisualizer","setRunning","bool","speedChange","generateArray","arraySize","array","defaultLength","windowWidth","window","innerWidth","topRadius","bottomRadius","maxHeight","getBoundingClientRect","bottom","newArray","random","setState","bars","map","key","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","cachedArray","resetArray","repeat","oldArray","testSort","mySort","startTime","Date","testArr","testArr2","console","log","arrayEquality","elapsedTime","ms","Promise","resolve","setTimeout","App","ReactGA","initialize","pageview","location","pathname","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4fcd4b9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-flip.2317ec81.mp3\";","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n  },\n  input: {\n    width: 50,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n    backgroundColor: 'rgba(100%, 100%, 100%, 20%)',\n    borderRadius: '10px',\n  },\n});\n\nexport default function LengthSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(25);\n\n  useEffect(() => {\n    if (value < 5) {\n      props.onSlide(5);\n    } else if (value > 125) {\n      props.onSlide(125);\n    } else {\n      props.onSlide(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 5) {\n      setValue(5);\n    } else if (value > 125) {\n      setValue(125);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='input-slider' gutterBottom >\n        Array Length\n      </Typography >\n      <Grid container spacing={2} alignItems='center'>\n        <Grid item xs>\n          <Slider\n            min={5}\n            max={125}\n            style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}}\n            value={typeof value === 'number' ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby='input-slider'\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin='dense'\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 5,\n              max: 125,\n              type: 'number',\n              'aria-labelledby': 'input-slider',\n              style: {textAlign: 'center'},\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 220,\n    color: 'rgba(100%, 100%, 100%, 82.5%)'\n  },\n});\n\n// sets the time interval between animation frames\nexport default function SpeedSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(10);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => props.onSlide(value), [value]);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='continuous-slider' gutterBottom>\n        Sorting Speed\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item>\n        </Grid>\n        <Grid item xs>\n          <Slider value={value} onChange={handleChange} style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}} aria-labelledby='continuous-slider' />\n        </Grid>\n        <Grid item>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport LengthSlider from './LengthSlider';\nimport SpeedSlider from './SpeedSlider';\nimport './Menu.css';\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithm: 'selection'\n        }\n    }\n\n    handleSpeedChange(interval) {\n        this.props.onSpeedChange(interval);\n    }\n\n    handleGenerate(length) {\n        this.props.onGenerate(length);\n    }\n    \n    handleReset() {\n        this.props.onReset();\n    }\n\n    handleExecute() {\n        const selectedAlgorithm = document.getElementById('menu-select').value;\n        this.props.onExecute(selectedAlgorithm);\n    }\n\n    render() {\n        return (\n            <div id='menu-container'>\n                <div className='menu-item' id='selection-sort' onClick={() => this.handleGenerate()}>New Array</div>\n                <div className='menu-item' id='selection-sort' onClick={() => this.handleReset()}>Reset Array</div>\n                <SpeedSlider onSlide={interval => this.handleSpeedChange(interval)} />\n                <LengthSlider onSlide={length => this.handleGenerate(length)} />\n                <select className='menu-item' id='menu-select' >\n                    <option value='selection'>Selection Sort</option>\n                    <option value='insertion'>Insertion Sort</option>\n                    <option value='merge'>Merge Sort</option>\n                    <option value='quick'>Quicksort</option>\n                    {/* <option value='bubble'>Bubble Sort</option>\n                    <option value='heap'>Heapsort</option> */}\n                </select>\n                <div className='menu-item' id='execute' onClick={() => this.handleExecute()}>Execute</div>\n            </div>\n        );\n    }\n}\n","export default function getQuickAnimations(arr, left, right, animations) {\n    let index;\n    if (arr.length > 1) {\n        index = partitionAnimate(arr, left, right, animations);\n        if (left < index - 1) {\n            getQuickAnimations(arr, left, index - 1, animations);\n        }\n        if (index < right) {\n            getQuickAnimations(arr, index, right, animations);\n        }\n    }\n    return animations;\n}\n\nfunction partitionAnimate(arr, left, right, animations) {\n    const pivotIdx = Math.floor((right + left) / 2)\n    const pivot = arr[pivotIdx];\n    animations.push([pivotIdx])\n    \n    let i = left;\n    let j = right;\n\n    while (i <= j) {\n        while (arr[i] < pivot) {\n            i++;\n        }\n        while (arr[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            const temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            animations.push([i, j])\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\n\n// export function quickAlgo(arr, left, right) {\n//     let index;\n//     if (arr.length > 1) {\n//         index = partition(arr, left, right);\n//         if (left < index - 1) { // more elements on the left side of the pivot\n//             quickAlgo(arr, left, index - 1);\n//         }\n//         if (index < right) { // more elements on the right side of the pivot\n//             quickAlgo(arr, index, right);\n//         }\n//     }\n//     return arr;\n// }\n\n// function partition(arr, left, right) {\n//     const pivot = arr[Math.floor((right + left) / 2)];\n    \n//     let i = left;\n//     let j = right;\n\n//     while (i <= j) {\n//         while (arr[i] < pivot) {\n//             i++;\n//         }\n//         while (arr[j] > pivot) {\n//             j--;\n//         }\n//         if (i <= j) {\n//             const temp = arr[i];\n//             arr[i] = arr[j];\n//             arr[j] = temp;\n//             i++;\n//             j--;\n//         }\n//     }\n//     return i;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getQuickAnimations from '../algorithms/Quick';\n\nexport default async function animateQuickSort(stateArray) {\n    const animations = getQuickAnimations(stateArray, 0, stateArray.length - 1, []);\n    const arr = document.getElementsByClassName('array');\n    stateArray.sort((a, b) => a - b);\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n\n        if (animations[i].length === 1) {\n            cardFlip.play();\n            const [idx] = animations[i];\n\n            arr[idx].style.backgroundColor = colors.red;\n            await wait(animationInterval);\n        }\n        else {\n            const [idx1, idx2] = animations[i];\n\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            const temp = arr[idx1].style.height;\n            arr[idx1].style.height = arr[idx2].style.height;\n            arr[idx2].style.height = temp;\n            await wait(animationInterval);\n\n            const value1 = parseInt(arr[idx1].style.height.slice(0, -2));\n            const value2 = parseInt(arr[idx2].style.height.slice(0, -2));\n            arr[idx1].style.backgroundColor = value1 === stateArray[idx1] ? colors.purple : colors.blue;\n            arr[idx2].style.backgroundColor = value2 === stateArray[idx2] ? colors.purple : colors.blue;\n            await wait(animationInterval);\n        }\n    }\n    \n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(0.5 * animationInterval);\n    }\n}\n","const purple = '#8a2be2';\nconst red = '#dc143c';\n\nexport default function getSelectionAnimations(arr) {\n    let minIdx, temp;\n    const animations = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        minIdx = i;\n        // arr[i] = purple\n        animations.push([i, purple, 'sorted'])\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n                // arr[j] = purple\n                animations.push([j, purple])\n            }\n            else {\n                // arr[j] = red\n                animations.push([j, red])\n            }\n        }\n\n        if (minIdx > i) {\n            temp = arr[minIdx];\n            arr[minIdx] = arr[i];\n            arr[i] = temp;\n            // swap heights a[i], a[minIdx]\n            animations.push([i, minIdx]);\n        }\n    }\n\n    return animations;\n}\n\n\n\n// export function selectionAlgo(arr) {\n//     let minIdx, temp;\n    \n//     for (let i = 0; i < arr.length; i++) {\n//         minIdx = i;\n//         for (let j = i + 1; j < arr.length; j++) {\n//             if (arr[j] < arr[minIdx]) {\n//                 minIdx = j;\n//             }\n//         }\n\n//         if (minIdx > i) {\n//             temp = arr[minIdx];\n//             arr[minIdx] = arr[i];\n//             arr[i] = temp;\n//         }\n//     }\n\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getSelectionAnimations from '../algorithms/Selection';\n\nexport default async function animateSelectionSort(stateArray) {\n    const animations = getSelectionAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n    \n    // first bar will be purple (current min)\n    arr[0].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n    \n    for (let i = 1; i < animations.length; i++) {\n        if (!isRunning) return;\n        // swapping animations[i][0] and animations[i][1]\n        if (typeof animations[i][1] === 'number') {\n            cardFlip.play();\n            // the last arraybar is currently colors.red, change it back\n            arr[animations[i - 1][0]].style.backgroundColor = colors.green;\n            const [idx1, idx2] = animations[i];\n\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            const temp = arr[idx1].style.height;\n            arr[idx1].style.height = arr[idx2].style.height;\n            arr[idx2].style.height = temp;\n            await wait(animationInterval);\n\n            arr[idx1].style.backgroundColor = colors.purple;\n            arr[idx2].style.backgroundColor = colors.green;\n            await wait(animationInterval);\n        }\n        // coloring a bar red or purple to indicate comparison\n        else {\n            const [idx, color, type] = animations[i];\n            arr[idx].style.backgroundColor = color;\n            arr[idx].type = type;\n\n            if (animations[i - 1][1] === colors.red) {\n                arr[animations[i - 1][0]].style.backgroundColor = colors.green;\n            }\n            // if is the new min, reset the last min\n            if (color === colors.purple) {\n                for (let j = idx - 1; j > 0; j--) {\n                    if (arr[j].type === 'sorted') {\n                        break;\n                    }\n                    if (arr[j].style.backgroundColor === 'rgb(138, 43, 226)') { //purple\n                        arr[j].style.backgroundColor = colors.green;\n                        break;\n                    }\n                }\n            }\n            await wait(animationInterval);\n        }\n    }\n    \n    arr[arr.length - 1].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[i].type = undefined;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].type = undefined;\n        await wait(0.5 * animationInterval);\n    }\n}\n","const purple = '#8a2be2';\n\nexport default function getInsertionAnimations(arr) {\n    const animations = [];\n\n    for (let i = 1; i < arr.length; i++) {\n        let j = i - 1;\n        const temp = arr[i];\n        animations.push([i, purple])\n        while (j >= 0 && arr[j] > temp) {\n            const temp2 = arr[j+1]\n            arr[j+1] = arr[j];\n            arr[j] = temp2;\n            animations.push([j, j + 1])\n            j--;\n        }\n    }\n\n    return animations;\n}\n\n\n\n// // Algo w/ more swapping for better visual\n// export function insertionAlgo(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             const temp2 = arr[j+1]\n//             arr[j+1] = arr[j];\n//             arr[j] = temp2;\n//             j--;\n//         }\n//     }\n//     return arr;\n// }\n\n// // More efficient version - less swapping\n// export function insertionAlgo2(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             arr[j+1] = arr[j];\n//             j--;\n//         }\n//         arr[j+1] = temp;\n//     }\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getInsertionAnimations from '../algorithms/Insertion';\n\nexport default async function animateInsertionSort(stateArray) {\n    const animations = getInsertionAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    // first bar will be purple (current min)\n    arr[0].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n    \n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) {\n            for (let i = 0; i < arr.length; i++) {\n                arr[i].style.backgroundColor = colors.green;\n            }\n            return;\n        }\n\n        // swapping\n        if (typeof animations[i][1] === 'number') {\n            const [idx1, idx2] = animations[i];\n            \n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.red;\n            await wait(animationInterval);\n\n            const temp = arr[idx1].style.height;\n            arr[idx1].style.height = arr[idx2].style.height;\n            arr[idx2].style.height = temp;\n            arr[idx1].style.backgroundColor = colors.red;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            arr[idx2].style.backgroundColor = colors.purple;\n            if (i === animations.length - 1 || typeof animations[i + 1][1] !== 'number') {\n                cardFlip.play();\n                await wait(animationInterval);\n                arr[idx1].style.backgroundColor = colors.purple;\n            }\n        }\n        // coloring\n        else {\n            const [idx, color] = animations[i];\n            arr[idx].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n    }\n\n    await wait(animationInterval);\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(0.5 * animationInterval);\n    }\n}\n","const purple = '#8a2be2';\n\nconst gradients = {\n  3: { 1: '#00747f', 2: '#0073e7', 4: purple },\n  4: { 1: '#007264', 2: '#0076b8', 4: '#006cf5', 8: purple },\n  5: { 1: '#007056', 2: '#007596', 4: '#0075d7', 8: '#0066f9', 16: purple },\n  6: { 1: '#006f4d', 2: '#00747f', 4: '#0076b8', 8: '#0073e7', 16: '#0061fa', 32: purple },\n  7: { 1: '#006e47', 2: '#00736f', 4: '#0076a0', 8: '#0076cf', 16: '#0070f0', 32: '#005df9', 64: purple }\n};\n\nexport default function getMergeAnimations(a) {\n  const animations = [], b = [];\n  const level = Math.ceil(Math.log2(a.length))\n\n  for (let width = 1; width < a.length; width *= 2) {\n    const color = gradients[level][width];\n    animations.push(null);\n    \n    for (let i = 0; i < a.length; i += 2 * width) {\n      mergeAnimate(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b, animations, color);\n    }\n    for (let i = 0; i < a.length; i++) {\n      a[i] = b[i];\n    }\n  }\n  return animations\n}\n\nfunction mergeAnimate(a, left, right, end, b, animations, color) {\n  let i = left, j = right;\n  for (let k = left; k < end; k++) {\n    if (i < right && (j >= end || a[i] <= a[j])) {\n      animations.push([color, i]);\n      b[k] = a[i++];\n    }\n    else {\n      animations.push([color, k, j]);\n      b[k] = a[j++];\n    }\n  }\n}\n\n\n\n// export function mergeAlgo(a) {\n//   const b = [];\n\n//   for (let width = 1; width < a.length; width *= 2) {\n//     for (let i = 0; i < a.length; i += 2 * width) {\n//       merge(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b);\n//     }\n//     for (let i = 0; i < a.length; i++) {\n//       a[i] = b[i];\n//     }\n//   }\n\n//   return a\n// }\n\n// function merge(a, left, right, end, b) {\n//   let i = left, j = right;\n  \n//   for (let k = left; k < end; k++) {\n//     if (i < right && (j >= end || a[i] <= a[j])) {\n//       b[k] = a[i++];\n//     }\n//     else {\n//       b[k] = a[j++];\n//     }\n//   }\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getMergeAnimations from '../algorithms/Merge';\n\nexport default async function animateMergeSort(stateArray) {\n    const animations = getMergeAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n\n        if (!animations[i]) {\n            cardFlip.play();\n            continue;\n        }\n\n        const color = animations[i][0];\n        if (animations[i].length === 3) {\n            const [, idx1, idx2] = animations[i];\n\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            const temp = arr[idx2].style.height;\n            for (let i = idx2; i > idx1; i--) {\n                arr[i].style.height = arr[i - 1].style.height;\n            }\n            arr[idx1].style.height = temp;\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = color;\n            await wait(animationInterval);\n\n            arr[idx1].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n        else {\n            const [, idx] = animations[i];\n            arr[idx].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            arr[idx].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n    }\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(0.5 * animationInterval);\n    }\n}\n","import React from 'react';\nimport Menu from './Menu';\nimport UIfx from '../../node_modules/uifx';\nimport cardFlipMp3 from '../resources/card-flip.mp3';\nimport './SortingTimeVisualizer.css';\n\nimport animateQuickSort from '../animations/QuickAnimation';\nimport animateSelectionSort from '../animations/SelectionAnimation';\nimport animateInsertionSort from '../animations/InsertionAnimation';\nimport animateMergeSort from '../animations/MergeAnimation';\n\n\n// not very React-y, but these are only imported by animation/algorithm scripts to execute the sort\nexport let isRunning = false;\nexport let animationInterval = 0;\nexport const cardFlip = new UIfx(cardFlipMp3, { throttleMs: 60 });\nexport const colors = {\n    purple: '#8a2be2',\n    red: '#dc143c',\n    green: '#24682d',\n    yellow: '#ffff00',\n    blue: '#0076b8'\n}\n\n\n// main component of application\nexport default class SortingTimeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        // array holds height values, bars holds the actual divs\n        this.state = { array: [], bars: [], };\n        \n        this.cachedArray = [];\n        this.defaultLength = 60;\n        this.maxHeight = 550;\n    }\n    \n    // true if algorithm is currently running, false otherwise\n    setRunning = bool => isRunning = bool;\n\n    // compute reciprocal of interval to make the slider feel linear\n    speedChange = interval => animationInterval = interval < 5 ? 300 : 1500/interval - 15;\n\n    // display a new randomized array, possibly with a new length\n    generateArray = length => {\n        const array = document.getElementsByClassName('array');\n        this.setRunning(false);\n        \n        let arraySize;\n        if (length) {\n            arraySize = length;\n            this.defaultLength = length;\n        } else {\n            arraySize = this.defaultLength\n        }\n\n        const windowWidth = window.innerWidth;\n        const margin = Math.max((windowWidth) / (10 * arraySize), 1.5);\n        const width = Math.max((windowWidth - 100) / (1.75 * arraySize), 7);\n        const topRadius = Math.max(width / 10, 3);\n        const bottomRadius = topRadius / 3;\n\n        // 85% of the distance between array container and menu\n        this.maxHeight = 0.85 * (document.getElementById('bars-container').getBoundingClientRect().bottom -\n                                 document.getElementById('menu-container').getBoundingClientRect().bottom);\n        \n        const newArray = [];\n        for (let i = 0; i < arraySize; i++) {\n            newArray.push(Math.floor(Math.random()*this.maxHeight + 15));\n        }\n        // const newArray = [ 250, 350, 100, 50, 550, 300, 175, 450 ];\n        this.setState({\n            array: newArray,\n            bars: newArray.map((value, i) => <div className='array' key={i} idx={i} color={colors.green} type={undefined} style={{\n                height: value,\n                margin: margin,\n                width: width,\n                borderTopLeftRadius: topRadius, borderTopRightRadius: topRadius,\n                borderBottomLeftRadius: bottomRadius, borderBottomRightRadius: bottomRadius,\n            }} />)\n        });\n\n        // deep copy to allow resetting to original state\n        this.cachedArray = [];\n        for (let i = 0; i < newArray.length; i++) {\n            this.cachedArray.push(newArray[i]);\n        }\n\n        // in case we are currently in execution\n        for (let i = 0; i < array.length; i++) {\n            array[i].style.backgroundColor = colors.green;\n        }\n    }\n\n    // return bar heights and colors to pre-sorted state\n    resetArray = async () => {\n        for (let repeat = 0; repeat < 1; repeat++) {\n            const array = document.getElementsByClassName('array');\n            const arraySize = array.length;\n\n            this.setRunning(false);\n\n            const oldArray = []\n            for (let i = 0; i < arraySize; i++) {\n                array[i].style.height = this.cachedArray[i] + \"px\";\n                array[i].type = undefined;\n                oldArray.push(this.cachedArray[i])\n            }\n\n            this.setState({array: oldArray});\n            \n            for (let i = 0; i < arraySize; i++) {\n                array[i].style.backgroundColor = colors.green;\n            }\n            await wait(animationInterval + 0.1);\n        }\n    }\n\n\n    // generates many large arrays, logs 'true' for each correct sort\n    testSort = mySort => {\n        const startTime = new Date();\n        for (let i = 0; i < 100; i++) {\n            const testArr = [];\n            const length = Math.floor(Math.random()*1001)\n            for (let j = 0; j < length; j++) {\n                testArr.push(Math.floor(Math.random()*501))\n            }\n            const testArr2 = [...testArr];\n    \n            mySort(testArr, 0, testArr.length - 1);\n            correctSort(testArr2);\n    \n            console.log(arrayEquality(testArr, testArr2));\n        }\n        const elapsedTime = new Date() - startTime;\n        console.log(\"Elapsed time: \", elapsedTime, \" ms\");\n    }\n\n    // runs selected algorithm from dropdown\n    handleExecute = async algorithm => {\n        if (isRunning) return;\n        this.setRunning(true);\n\n        if (algorithm === 'selection')\n            await animateSelectionSort(this.state.array);\n        else if (algorithm === 'insertion')\n            await animateInsertionSort(this.state.array);\n        else if (algorithm === 'merge')\n            await animateMergeSort(this.state.array);\n        else if (algorithm === 'quick')\n            await animateQuickSort(this.state.array);\n        // else if (algorithm === 'bubble')\n        //     this.animateBubbleSort();\n        // else\n        //     this.animateHeapSort();\n\n        this.setRunning(false);\n    }\n\n    // everything on screen is rendered here\n    render() {\n        return (\n            <div>\n                <div id='color-strip' />\n                <Menu onGenerate={this.generateArray} onReset={this.resetArray} onSpeedChange={this.speedChange} onExecute={this.handleExecute} />\n                    <div id='bars-container'>\n                        {this.state.bars}\n                        {/* <button id='test-sort' onClick={this.testSort.bind(this, quickAlgo)}>Test Sort</button> */}\n                    </div>\n            </div>\n        )\n    }\n}\n\n\n// effectively a synchronous sleep function\nexport function wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// for testing purposes\nfunction correctSort(arr) {\n    return arr.sort((a, b) => a - b);\n}\n\n// also for testing purposes\nfunction arrayEquality(a, b) {\n\tif (a.length !== b.length) {\n        return false;\n    }\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport SortingTimeVisualizer from './components/SortingTimeVisualizer';\nimport ReactGA from 'react-ga'; // https://github.com/react-ga/react-ga\n\n\nfunction App() {\n  // Google Analytics\n  useEffect(() => {\n    ReactGA.initialize('UA-171800090-2');\n    ReactGA.pageview(window.location.pathname);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <SortingTimeVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}