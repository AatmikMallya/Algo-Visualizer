{"version":3,"sources":["resources/card-flip.mp3","components/LengthSlider.js","components/SpeedSlider.js","components/Menu.js","algorithms/Insertion.js","algorithms/Merge.js","algorithms/Quick.js","algorithms/Selection.js","components/SortingTimeVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","color","input","backgroundColor","borderRadius","LengthSlider","props","classes","React","useState","value","setValue","useEffect","onSlide","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","min","max","style","onChange","event","newValue","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","type","textAlign","SpeedSlider","Menu","state","algorithm","interval","this","onSpeedChange","length","onGenerate","onReset","selectedAlgorithm","document","getElementById","onExecute","onClick","handleGenerate","handleReset","handleSpeedChange","handleExecute","Component","getInsertionAnimations","arr","animations","i","j","temp","push","temp2","gradients","3","1","2","4","8","5","16","6","32","7","64","getMergeAnimations","a","b","level","Math","ceil","log2","mergeAnimate","left","right","end","k","getQuickAnimations","index","pivotIdx","floor","pivot","partitionAnimate","getSelectionAnimations","minIdx","green","yellow","cardFlip","UIfx","cardFlipMp3","throttleMs","SortingTimeVisualizer","array","bars","cachedArray","animationInterval","defaultLength","maxHeight","isRunning","generateArray","bind","resetArray","speedChange","arraySize","getElementsByClassName","windowWidth","window","innerWidth","topRadius","bottomRadius","getBoundingClientRect","bottom","newArray","random","setState","map","key","idx","undefined","height","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","oldArray","wait","play","idx1","idx2","sort","value1","parseInt","slice","value2","mySort","startTime","Date","testArr","testArr2","console","log","arrayEquality","elapsedTime","animateSelectionSort","animateInsertionSort","animateMergeSort","animateQuickSort","ms","Promise","resolve","setTimeout","arr1","arr2","App","ReactGA","initialize","pageview","location","pathname","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a68c5ccd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-flip.2317ec81.mp3\";","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n  },\n  input: {\n    width: 50,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n    backgroundColor: 'rgba(100%, 100%, 100%, 20%)',\n    borderRadius: '10px',\n  },\n});\n\nexport default function LengthSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(25);\n\n  useEffect(() => {\n    if (value < 5) {\n      props.onSlide(5);\n    } else if (value > 125) {\n      props.onSlide(125);\n    } else {\n      props.onSlide(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 5) {\n      setValue(5);\n    } else if (value > 125) {\n      setValue(125);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='input-slider' gutterBottom >\n        Array Length\n      </Typography >\n      <Grid container spacing={2} alignItems='center'>\n        <Grid item xs>\n          <Slider\n            min={5}\n            max={125}\n            style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}}\n            value={typeof value === 'number' ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby='input-slider'\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin='dense'\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 5,\n              max: 125,\n              type: 'number',\n              'aria-labelledby': 'input-slider',\n              style: {textAlign: 'center'},\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 220,\n    color: 'rgba(100%, 100%, 100%, 82.5%)'\n  },\n});\n\nexport default function SpeedSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(10);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => props.onSlide(value), [value]);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='continuous-slider' gutterBottom>\n        Sorting Speed\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item>\n        </Grid>\n        <Grid item xs>\n          <Slider value={value} onChange={handleChange} style={{color: 'rgba(100%, 100%, 100%, 82.5%)'}} aria-labelledby='continuous-slider' />\n        </Grid>\n        <Grid item>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport LengthSlider from './LengthSlider';\nimport SpeedSlider from './SpeedSlider';\nimport './Menu.css';\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithm: 'selection'\n        }\n    }\n\n    handleSpeedChange(interval) {\n        this.props.onSpeedChange(interval);\n    }\n\n    handleGenerate(length) {\n        this.props.onGenerate(length);\n    }\n    \n    handleReset() {\n        this.props.onReset();\n    }\n\n    handleExecute() {\n        const selectedAlgorithm = document.getElementById('menu-select').value;\n        this.props.onExecute(selectedAlgorithm);\n    }\n\n    render() {\n        return (\n            <div id='menu-container'>\n                <div className='menu-item' id='selection-sort' onClick={() => this.handleGenerate()}>New Array</div>\n                <div className='menu-item' id='selection-sort' onClick={() => this.handleReset()}>Reset Array</div>\n                <SpeedSlider onSlide={interval => this.handleSpeedChange(interval)} />\n                <LengthSlider onSlide={length => this.handleGenerate(length)} />\n                <select className='menu-item' id='menu-select' >\n                    <option value='selection'>Selection Sort</option>\n                    <option value='insertion'>Insertion Sort</option>\n                    <option value='merge'>Merge Sort</option>\n                    <option value='quick'>Quicksort</option>\n                    {/* <option value='bubble'>Bubble Sort</option>\n                    <option value='heap'>Heapsort</option> */}\n                </select>\n                <div className='menu-item' id='execute' onClick={() => this.handleExecute()}>Execute</div>\n            </div>\n        );\n    }\n}\n","const purple = '#8a2be2';\n\nexport function getInsertionAnimations(arr) {\n    const animations = [];\n\n    for (let i = 1; i < arr.length; i++) {\n        let j = i - 1;\n        const temp = arr[i];\n        animations.push([i, purple])\n        while (j >= 0 && arr[j] > temp) {\n            const temp2 = arr[j+1]\n            arr[j+1] = arr[j];\n            arr[j] = temp2;\n            animations.push([j, j + 1])\n            j--;\n        }\n    }\n\n    return animations;\n}\n\n\n\n// // Algo w/ more swapping for better visual\n// export function insertionAlgo(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             const temp2 = arr[j+1]\n//             arr[j+1] = arr[j];\n//             arr[j] = temp2;\n//             j--;\n//         }\n//     }\n//     return arr;\n// }\n\n// // More efficient version - less swapping\n// export function insertionAlgo2(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             arr[j+1] = arr[j];\n//             j--;\n//         }\n//         arr[j+1] = temp;\n//     }\n//     return arr;\n// }\n","const purple = '#8a2be2';\n\nconst gradients = {\n  3: { 1: '#00747f', 2: '#0073e7', 4: purple },\n  4: { 1: '#007264', 2: '#0076b8', 4: '#006cf5', 8: purple },\n  5: { 1: '#007056', 2: '#007596', 4: '#0075d7', 8: '#0066f9', 16: purple },\n  6: { 1: '#006f4d', 2: '#00747f', 4: '#0076b8', 8: '#0073e7', 16: '#0061fa', 32: purple },\n  7: { 1: '#006e47', 2: '#00736f', 4: '#0076a0', 8: '#0076cf', 16: '#0070f0', 32: '#005df9', 64: purple }\n};\n\nexport function getMergeAnimations(a) {\n  const animations = [], b = [];\n  const level = Math.ceil(Math.log2(a.length))\n\n  for (let width = 1; width < a.length; width *= 2) {\n    const color = gradients[level][width];\n    animations.push(null);\n    \n    for (let i = 0; i < a.length; i += 2 * width) {\n      mergeAnimate(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b, animations, color);\n    }\n    for (let i = 0; i < a.length; i++) {\n      a[i] = b[i];\n    }\n  }\n  return animations\n}\n\nfunction mergeAnimate(a, left, right, end, b, animations, color) {\n  let i = left, j = right;\n  for (let k = left; k < end; k++) {\n    if (i < right && (j >= end || a[i] <= a[j])) {\n      animations.push([color, i]);\n      b[k] = a[i++];\n    }\n    else {\n      animations.push([color, k, j]);\n      b[k] = a[j++];\n    }\n  }\n}\n\n\n\n// export function mergeAlgo(a) {\n//   const b = [];\n\n//   for (let width = 1; width < a.length; width *= 2) {\n//     for (let i = 0; i < a.length; i += 2 * width) {\n//       merge(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b);\n//     }\n//     for (let i = 0; i < a.length; i++) {\n//       a[i] = b[i];\n//     }\n//   }\n\n//   return a\n// }\n\n// function merge(a, left, right, end, b) {\n//   let i = left, j = right;\n  \n//   for (let k = left; k < end; k++) {\n//     if (i < right && (j >= end || a[i] <= a[j])) {\n//       b[k] = a[i++];\n//     }\n//     else {\n//       b[k] = a[j++];\n//     }\n//   }\n// }\n","export function getQuickAnimations(arr, left, right, animations) {\n    let index;\n    if (arr.length > 1) {\n        index = partitionAnimate(arr, left, right, animations);\n        if (left < index - 1) {\n            getQuickAnimations(arr, left, index - 1, animations);\n        }\n        if (index < right) {\n            getQuickAnimations(arr, index, right, animations);\n        }\n    }\n    return animations;\n}\n\nfunction partitionAnimate(arr, left, right, animations) {\n    const pivotIdx = Math.floor((right + left) / 2)\n    const pivot = arr[pivotIdx];\n    animations.push([pivotIdx])\n    \n    let i = left;\n    let j = right;\n\n    while (i <= j) {\n        while (arr[i] < pivot) {\n            i++;\n        }\n        while (arr[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            const temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            animations.push([i, j])\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\n\n// export function quickAlgo(arr, left, right) {\n//     let index;\n//     if (arr.length > 1) {\n//         index = partition(arr, left, right);\n//         if (left < index - 1) { // more elements on the left side of the pivot\n//             quickAlgo(arr, left, index - 1);\n//         }\n//         if (index < right) { // more elements on the right side of the pivot\n//             quickAlgo(arr, index, right);\n//         }\n//     }\n//     return arr;\n// }\n\n// function partition(arr, left, right) {\n//     const pivot = arr[Math.floor((right + left) / 2)];\n    \n//     let i = left;\n//     let j = right;\n\n//     while (i <= j) {\n//         while (arr[i] < pivot) {\n//             i++;\n//         }\n//         while (arr[j] > pivot) {\n//             j--;\n//         }\n//         if (i <= j) {\n//             const temp = arr[i];\n//             arr[i] = arr[j];\n//             arr[j] = temp;\n//             i++;\n//             j--;\n//         }\n//     }\n//     return i;\n// }\n","const purple = '#8a2be2';\nconst red = '#dc143c';\n\nexport function getSelectionAnimations(arr) {\n    let minIdx, temp;\n    const animations = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        minIdx = i;\n        // arr[i] = purple\n        animations.push([i, purple, 'sorted'])\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n                // arr[j] = purple\n                animations.push([j, purple])\n            }\n            else {\n                // arr[j] = red\n                animations.push([j, red])\n            }\n        }\n\n        if (minIdx > i) {\n            temp = arr[minIdx];\n            arr[minIdx] = arr[i];\n            arr[i] = temp;\n            // swap heights a[i], a[minIdx]\n            animations.push([i, minIdx]);\n        }\n    }\n\n    return animations;\n}\n\n\n\n// export function selectionAlgo(arr) {\n//     let minIdx, temp;\n    \n//     for (let i = 0; i < arr.length; i++) {\n//         minIdx = i;\n//         for (let j = i + 1; j < arr.length; j++) {\n//             if (arr[j] < arr[minIdx]) {\n//                 minIdx = j;\n//             }\n//         }\n\n//         if (minIdx > i) {\n//             temp = arr[minIdx];\n//             arr[minIdx] = arr[i];\n//             arr[i] = temp;\n//         }\n//     }\n\n//     return arr;\n// }\n","import React from 'react';\nimport Menu from './Menu';\nimport './SortingTimeVisualizer.css';\n\n// import { getBubbleAnimations, bubbleAlgo } from '../algorithms/Bubble';\n// import { getHeapAnimations, heapAlgo } from '../algoritHeap';\nimport { getInsertionAnimations } from '../algorithms/Insertion';\nimport { getMergeAnimations } from '../algorithms/Merge';\nimport { getQuickAnimations, quickAlgo } from '../algorithms/Quick';\nimport { getSelectionAnimations } from '../algorithms/Selection';\n\nimport UIfx from '../../node_modules/uifx';\nimport cardFlipMp3 from '../resources/card-flip.mp3';\n\nconst purple = '#8a2be2';\nconst red = '#dc143c';\nconst green = '#24682d';\nconst yellow = '#ffff00';\nconst blue = '#0076b8';\n\nconst cardFlip = new UIfx(cardFlipMp3, { throttleMs: 60 });\n\nexport default class SortingTimeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        // array holds height values, bars holds the actual divs\n        this.state = { array: [], bars: [], };\n        \n        this.cachedArray = [];\n        this.animationInterval = 0;\n        this.defaultLength = 60;\n        this.maxHeight = 550;\n        this.isRunning = false;\n\n        this.generateArray = this.generateArray.bind(this);\n        this.resetArray = this.resetArray.bind(this);\n        this.speedChange = this.speedChange.bind(this);\n        this.handleExecute = this.handleExecute.bind(this);\n    }\n    \n    // initialize array to random values\n    componentDidMount() {\n        this.generateArray();\n    }\n\n    generateArray(length) {\n        const array = document.getElementsByClassName('array');\n        for (let i = 0; i < array.length; i++) {\n            array[i].style.backgroundColor = green;\n        }\n        this.isRunning = false;\n\n        let arraySize;\n        if (length) {\n            arraySize = length;\n            this.defaultLength = length;\n        } else {\n            arraySize = this.defaultLength\n        }\n\n        const windowWidth = window.innerWidth;\n        const margin = Math.max((windowWidth) / (10*arraySize), 1.5);\n        const width = Math.max((windowWidth - 100) / (1.75*arraySize), 7);\n        const topRadius = Math.max(width / 10, 3);\n        const bottomRadius = topRadius / 3;\n\n        // 85% of the distance between array container and menu\n        this.maxHeight = 0.85 * (document.getElementById('bars-container').getBoundingClientRect().bottom - document.getElementById('menu-container').getBoundingClientRect().bottom)\n        const newArray = [];\n        for (let i = 0; i < arraySize; i++) {\n            newArray.push(Math.floor(Math.random()*this.maxHeight + 15));\n        }\n\n        // const newArray = [ 250, 350, 100, 50, 550, 300, 175, 450 ];\n        this.setState({\n            array: newArray,\n            bars: newArray.map((value, i) => <div className='array' key={i} idx={i} color={green} type={undefined} style={{\n                height: value,\n                margin: margin,\n                width: width,\n                borderTopLeftRadius: topRadius, borderTopRightRadius: topRadius,\n                borderBottomLeftRadius: bottomRadius, borderBottomRightRadius: bottomRadius,\n            }} />)\n        });\n\n        this.cachedArray = [];\n        for (let i = 0; i < newArray.length; i++) {\n            this.cachedArray.push(newArray[i]);\n        }\n    }\n\n    resetArray() {\n        const array = document.getElementsByClassName('array');\n        const arraySize = array.length;\n\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.backgroundColor = green;\n        }\n        this.isRunning = false;\n\n        const oldArray = []\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.height = this.cachedArray[i] + \"px\";\n            array[i].type = undefined;\n            oldArray.push(this.cachedArray[i])\n        }\n\n        this.setState({array: oldArray});\n    }\n\n    speedChange(interval) {\n        // compute reciprocal of interval to make the slider feel linear\n        this.animationInterval = interval < 5 ? 300 : 1500/interval - 15;      \n        // this.animationInterval = 800;  \n    }\n\n    async animateSelectionSort() {\n        const animations = getSelectionAnimations(this.state.array)\n        const arr = document.getElementsByClassName('array')\n        \n        // first bar will be purple (current min)\n        arr[0].style.backgroundColor = purple;\n        await wait(this.animationInterval);\n        \n        for (let i = 1; i < animations.length; i++) {\n            if (!this.isRunning) return;\n            // swapping animations[i][0] and animations[i][1]\n            if (typeof animations[i][1] === 'number') {\n                cardFlip.play();\n                // the last arraybar is currently red, change it back\n                arr[animations[i - 1][0]].style.backgroundColor = green;\n                const [idx1, idx2] = animations[i];\n\n                arr[idx1].style.backgroundColor = yellow;\n                arr[idx2].style.backgroundColor = yellow;\n                await wait(this.animationInterval);\n\n                const temp = arr[idx1].style.height;\n                arr[idx1].style.height = arr[idx2].style.height;\n                arr[idx2].style.height = temp;\n                await wait(this.animationInterval);\n\n                arr[idx1].style.backgroundColor = purple;\n                arr[idx2].style.backgroundColor = green;\n                await wait(this.animationInterval);\n            }\n            // coloring a bar red or purple to indicate comparison\n            else {\n                const [idx, color, type] = animations[i];\n                arr[idx].style.backgroundColor = color;\n                arr[idx].type = type;\n\n                if (animations[i - 1][1] === red) {\n                    arr[animations[i - 1][0]].style.backgroundColor = green;\n                }\n                // if this is the new min, reset the last min\n                if (color === purple) {\n                    for (let j = idx - 1; j > 0; j--) {\n                        if (arr[j].type === 'sorted') {\n                            break;\n                        }\n                        if (arr[j].style.backgroundColor === 'rgb(138, 43, 226)') { //purple\n                            arr[j].style.backgroundColor = green;\n                            break;\n                        }\n                    }\n                }\n                await wait(this.animationInterval);\n            }\n        }\n        \n        arr[arr.length - 1].style.backgroundColor = purple;\n        await wait(this.animationInterval);\n\n        for (let i = 0; i < arr.length / 2; i++) {\n            arr[i].style.backgroundColor = green;\n            arr[i].type = undefined;\n            arr[arr.length - i - 1].style.backgroundColor = green;\n            arr[arr.length - i - 1].type = undefined\n            await wait(0.5 * this.animationInterval);\n        }\n        \n        this.isRunning = false;\n    }\n\n    async animateInsertionSort() {\n        const animations = getInsertionAnimations(this.state.array);\n        const arr = document.getElementsByClassName('array');\n\n        // first bar will be purple (current min)\n        arr[0].style.backgroundColor = purple;\n        await wait(this.animationInterval);\n        \n        for (let i = 0; i < animations.length; i++) {\n            if (!this.isRunning) {\n                for (let i = 0; i < arr.length; i++) {\n                    arr[i].style.backgroundColor = green;\n                }\n                return;\n            }\n\n            // swapping\n            if (typeof animations[i][1] === 'number') {\n                const [idx1, idx2] = animations[i];\n                \n                arr[idx1].style.backgroundColor = yellow;\n                arr[idx2].style.backgroundColor = red;\n                await wait(this.animationInterval);\n\n                const temp = arr[idx1].style.height;\n                arr[idx1].style.height = arr[idx2].style.height;\n                arr[idx2].style.height = temp;\n                arr[idx1].style.backgroundColor = red;\n                arr[idx2].style.backgroundColor = yellow;\n                await wait(this.animationInterval);\n\n                arr[idx2].style.backgroundColor = purple;\n                if (i === animations.length - 1 || typeof animations[i + 1][1] !== 'number') {\n                    cardFlip.play();\n                    await wait(this.animationInterval);\n                    arr[idx1].style.backgroundColor = purple;\n                }\n            }\n            // coloring\n            else {\n                const [idx, color] = animations[i];\n                arr[idx].style.backgroundColor = color;\n                await wait(this.animationInterval);\n            }\n        }\n\n        await wait(this.animationInterval);\n\n        for (let i = 0; i < arr.length / 2; i++) {\n            arr[i].style.backgroundColor = green;\n            arr[arr.length - i - 1].style.backgroundColor = green;\n            await wait(0.5 * this.animationInterval);\n        }\n        \n        this.isRunning = false;\n    }\n\n    async animateMergeSort() {\n        const animations = getMergeAnimations(this.state.array);\n        const arr = document.getElementsByClassName('array');\n\n        for (let i = 0; i < animations.length; i++) {\n            if (!this.isRunning) return;\n\n            if (!animations[i]) {\n                cardFlip.play();\n                continue;\n            }\n\n            const color = animations[i][0];\n            if (animations[i].length === 3) {\n                const [, idx1, idx2] = animations[i];\n\n                arr[idx2].style.backgroundColor = yellow;\n                await wait(this.animationInterval);\n\n                const temp = arr[idx2].style.height;\n                for (let i = idx2; i > idx1; i--) {\n                    arr[i].style.height = arr[i - 1].style.height;\n                }\n                arr[idx1].style.height = temp;\n                arr[idx1].style.backgroundColor = yellow;\n                arr[idx2].style.backgroundColor = color;\n                await wait(this.animationInterval);\n\n                arr[idx1].style.backgroundColor = color;\n                await wait(this.animationInterval);\n            }\n            else {\n                const [, idx] = animations[i];\n                arr[idx].style.backgroundColor = yellow;\n                await wait(this.animationInterval);\n\n                arr[idx].style.backgroundColor = color;\n                await wait(this.animationInterval);\n            }\n        }\n\n        for (let i = 0; i < arr.length / 2; i++) {\n            arr[i].style.backgroundColor = green;\n            arr[arr.length - i - 1].style.backgroundColor = green;\n            await wait(0.5 * this.animationInterval);\n        }\n\n        this.isRunning = false;\n    }\n\n    async animateQuickSort() {\n        const animations = getQuickAnimations(this.state.array, 0, this.state.array.length - 1, []);\n        const arr = document.getElementsByClassName('array');\n        this.state.array.sort((a, b) => a - b);\n\n        for (let i = 0; i < animations.length; i++) {\n            if (!this.isRunning) return;\n\n            if (animations[i].length === 1) {\n                cardFlip.play();\n                const [idx] = animations[i];\n\n                arr[idx].style.backgroundColor = red;\n                await wait(this.animationInterval);\n            }\n            else {\n                const [idx1, idx2] = animations[i];\n\n                arr[idx1].style.backgroundColor = yellow;\n                arr[idx2].style.backgroundColor = yellow;\n                await wait(this.animationInterval);\n\n                const temp = arr[idx1].style.height;\n                arr[idx1].style.height = arr[idx2].style.height;\n                arr[idx2].style.height = temp;\n                await wait(this.animationInterval);\n\n                const value1 = parseInt(arr[idx1].style.height.slice(0, -2));\n                const value2 = parseInt(arr[idx2].style.height.slice(0, -2));\n                arr[idx1].style.backgroundColor = value1 === this.state.array[idx1] ? purple : blue;\n                arr[idx2].style.backgroundColor = value2 === this.state.array[idx2] ? purple : blue;\n                await wait(this.animationInterval);\n            }\n        }\n        \n        for (let i = 0; i < arr.length / 2; i++) {\n            arr[i].style.backgroundColor = green;\n            arr[arr.length - i - 1].style.backgroundColor = green;\n            await wait(0.5 * this.animationInterval);\n        }\n\n        this.isRunning = false;\n    }\n\n    // async animateBubbleSort() {\n    //     console.log('Todo: Bubble sort')\n    //     const animations = getBubbleAnimations(this.state.array);\n    // }\n\n    // async animateHeapSort() {\n    //     console.log('Todo: Heapsort')\n    //     const animations = getHeapAnimations(this.state.array);\n    // }\n\n    // generates many large arrays, logs 'true' for each correct sort\n    testSort(mySort) {\n        const startTime = new Date();\n        for (let i = 0; i < 100; i++) {\n            const testArr = [];\n            const length = Math.floor(Math.random()*1001)\n            for (let j = 0; j < length; j++) {\n                testArr.push(Math.floor(Math.random()*501))\n            }\n            const testArr2 = [...testArr];\n    \n            mySort(testArr, 0, testArr.length - 1);\n            correctSort(testArr2);\n    \n            console.log(arrayEquality(testArr, testArr2));\n        }\n        const elapsedTime = new Date() - startTime;\n        console.log(\"Elapsed time: \", elapsedTime, \" ms\");\n    }\n\n    async handleExecute(algorithm) {\n        if (this.isRunning) return;\n        this.isRunning = true;\n\n        if (algorithm === 'selection')\n            this.animateSelectionSort();\n        else if (algorithm === 'insertion')\n            this.animateInsertionSort();\n        else if (algorithm === 'merge')\n            this.animateMergeSort();\n        else if (algorithm === 'quick')\n            this.animateQuickSort();\n        // else if (algorithm === 'bubble')\n        //     this.animateBubbleSort();\n        // else\n        //     this.animateHeapSort();\n    }\n\n    // everything rendered on screen is here\n    render() {\n        return (\n            <div>\n                <div id='color-strip' />\n                <Menu onGenerate={this.generateArray} onReset={this.resetArray} onSpeedChange={this.speedChange} onExecute={this.handleExecute} />\n                    <div id='bars-container'>\n                        {this.state.bars}\n                        {/* <button id='test-sort' onClick={this.testSort.bind(this, quickAlgo)}>Test Sort</button> */}\n                    </div>\n            </div>\n        )\n    }\n}\n\n// effectively a synchronous sleep function\nfunction wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// for testing purposes\nfunction correctSort(arr) {\n    return arr.sort((a, b) => a - b);\n}\n\n// checks if two arrays are equal (for testing)\nfunction arrayEquality(arr1, arr2) {\n\tif (arr1.length !== arr2.length) {\n        return false;\n    }\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport SortingTimeVisualizer from './components/SortingTimeVisualizer';\nimport ReactGA from 'react-ga'; // https://github.com/react-ga/react-ga\n\n\nfunction App() {\n  useEffect(() => {\n    ReactGA.initialize('UA-171800090-2');\n    ReactGA.pageview(window.location.pathname);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <SortingTimeVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}