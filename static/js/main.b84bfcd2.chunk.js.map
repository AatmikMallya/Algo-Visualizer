{"version":3,"sources":["resources/card-flip.mp3","components/LengthSlider.js","components/SpeedSlider.js","components/Menu.js","algorithms/SelectionSort.js","components/SortingTimeVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","color","input","backgroundColor","borderRadius","LengthSlider","props","classes","React","useState","value","setValue","useEffect","onSlide","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","min","max","style","onChange","event","newValue","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","type","textAlign","SpeedSlider","Menu","state","algorithm","speed","this","onSpeedChange","length","onGenerate","selectedAlgorithm","document","getElementById","onExecute","onClick","handleGenerate","handleSpeedChange","handleExecute","Component","getSelectionSortAnims","arr","minIdx","temp","animations","i","push","j","green","cardFlip","UIfx","cardFlipMp3","throttleMs","SortingTimeVisualizer","array","bars","animationSpeed","defaultLength","maxHeight","isRunning","generateArray","bind","speedChange","arraySize","getElementsByClassName","windowWidth","window","innerWidth","arrayMargin","Math","arrayWidth","getBoundingClientRect","bottom","newArray","floor","random","setState","map","key","index","undefined","height","arrayBars","wait","play","index1","index2","console","log","mySort","testArr","testArr2","sort","a","b","arrayEquality","animateSelectionSort","animateInsertionSort","animateMergeSort","animateQuickSort","ms","Promise","resolve","setTimeout","arr1","arr2","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b84bfcd2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-flip.2317ec81.mp3\";","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n    color: \"rgba(100%, 100%, 100%, 82.5%)\",\n  },\n  input: {\n    width: 50,\n    color: \"rgba(100%, 100%, 100%, 82.5%)\",\n    backgroundColor: \"rgba(100%, 100%, 100%, 20%)\",\n    borderRadius: \"10px\",\n  },\n});\n\nexport default function LengthSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(50);\n\n  useEffect(() => {\n    if (value < 5) {\n      props.onSlide(5);\n    } else if (value > 150) {\n      props.onSlide(150);\n    } else {\n      props.onSlide(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 5) {\n      setValue(5);\n    } else if (value > 150) {\n      setValue(150);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className=\"slider-label\" id=\"input-slider\" gutterBottom >\n        Array Length\n      </Typography >\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs>\n          <Slider\n            min={5}\n            max={150}\n            style={{color: \"rgba(100%, 100%, 100%, 82.5%)\"}}\n            value={typeof value === 'number' ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 5,\n              max: 150,\n              type: 'number',\n              'aria-labelledby': 'input-slider',\n              style: {textAlign: \"center\"},\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 200,\n    color: \"rgba(100%, 100%, 100%, 82.5%)\"\n  },\n});\n\nexport default function SpeedSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(30);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => props.onSlide(value), [value]);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className=\"slider-label\" id=\"continuous-slider\" gutterBottom>\n        Sorting Speed\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item>\n        </Grid>\n        <Grid item xs>\n          <Slider value={value} onChange={handleChange} style={{color: \"rgba(100%, 100%, 100%, 82.5%)\"}} aria-labelledby=\"continuous-slider\" />\n        </Grid>\n        <Grid item>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport LengthSlider from './LengthSlider';\nimport SpeedSlider from './SpeedSlider';\nimport './Menu.css';\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithm: \"selection\"\n        }\n    }\n\n    handleSpeedChange(speed) {\n        this.props.onSpeedChange(speed);\n    }\n\n    handleGenerate(length) {\n        this.props.onGenerate(length);\n    }\n\n    handleExecute() {\n        const selectedAlgorithm = document.getElementById(\"menu-select\").value;\n        this.props.onExecute(selectedAlgorithm);\n    }\n\n    render() {\n        return (\n            <div id=\"menu-container\">\n                <div className=\"menu-item\" id=\"selection-sort\" onClick={() => this.handleGenerate()}>New Array</div>\n                <SpeedSlider onSlide={speed => this.handleSpeedChange(speed)} />\n                <LengthSlider onSlide={length => this.handleGenerate(length)} />\n                <select className=\"menu-item\" id=\"menu-select\" >\n                    <option value=\"selection\">Selection Sort</option>\n                    <option value=\"insertion\">Insertion Sort</option>\n                    <option value=\"merge\">Merge Sort</option>\n                    <option value=\"quick\">Quicksort</option>\n                </select>\n                <div className=\"menu-item\" id=\"execute\" onClick={() => this.handleExecute()}>Execute</div>\n            </div>\n        );\n    }\n}\n","\nconst purple = \"#8a2be2\";\nconst red = \"#dc143c\";\n\n// export function getAnimations(arr) {\n//     const animations = []\n//     for (let i = 0; i < arr.length; i+=3) {\n//         animations.push([i, purple]);\n//     }\n//     for (let i = 0; i < arr.length; i+=5) {\n//         animations.push([i, red]);\n//     }\n//     return animations;\n// }\n\nexport function getSelectionSortAnims(arr) {\n    let minIdx, temp;\n    const animations = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        minIdx = i;\n        // arr[i] = purple\n        animations.push([i, purple, \"sorted\"])\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n                // arr[j] = purple\n                animations.push([j, purple])\n            }\n            else {\n                // arr[j] = red\n                animations.push([j, red])\n            }\n        }\n\n        if (minIdx > i) {\n            temp = arr[minIdx];\n            arr[minIdx] = arr[i];\n            arr[i] = temp;\n            // swap heights a[i], a[minIdx]\n            animations.push([i, minIdx]);\n        }\n    }\n\n    return animations;\n}\n\n// function selectionSortAlgo(arr) {\n//     let minIdx, temp;\n    \n//     for (let i = 0; i < arr.length; i++) {\n//         minIdx = i;\n//         for (let j = i + 1; j < arr.length; j++) {\n//             if (arr[j] < arr[minIdx]) {\n//                 minIdx = j;\n//             }\n//         }\n\n//         if (minIdx > i) {\n//             temp = arr[minIdx];\n//             arr[minIdx] = arr[i];\n//             arr[i] = temp;\n//         }\n//     }\n\n//     return arr;\n// }\n","import React from 'react';\nimport Menu from './Menu';\nimport './SortingTimeVisualizer.css';\nimport {getSelectionSortAnims} from '../algorithms/SelectionSort';\nimport UIfx from '../../node_modules/uifx';\nimport cardFlipMp3 from '../resources/card-flip.mp3';\n\n\n\nconst purple = \"#8a2be2\";\nconst red = \"#dc143c\";\nconst green = \"#24682d\";\nconst yellow = \"#ffff00\";\n\nconst cardFlip = new UIfx(cardFlipMp3, { throttleMs: 50 });\n\nexport default class SortingTimeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array : [], // holds height values\n        };\n        \n        this.bars = [];\n        this.animationSpeed = 0;\n        this.defaultLength = 60;\n        this.maxHeight = 550;\n        this.isRunning = false;\n\n        this.generateArray = this.generateArray.bind(this);\n        this.speedChange = this.speedChange.bind(this);\n        this.handleExecute = this.handleExecute.bind(this);\n    }\n    \n    // initialize array to random values\n    componentDidMount() {\n        this.generateArray();\n    }\n\n    generateArray(length) {\n        let arraySize;\n        if (length) {\n            arraySize = length;\n            this.defaultLength = length;\n        } else {\n            arraySize = this.defaultLength\n        }\n        if (this.isRunning) {\n            const bars = document.getElementsByClassName(\"array\");\n            for (let i = 0; i < arraySize; i++) {\n                bars[i].style.backgroundColor = green;\n            }\n            this.isRunning = false;\n        }\n\n        const windowWidth = window.innerWidth;\n        const arrayMargin = Math.max((windowWidth) / (10*arraySize), 1.5);\n        const arrayWidth = Math.max((windowWidth - 100) / (1.75*arraySize), 7);\n\n        // 85% of the distance between array container and menu\n        this.maxHeight = 0.85 * (document.getElementById(\"bars-container\").getBoundingClientRect().bottom - document.getElementById(\"menu-container\").getBoundingClientRect().bottom)\n        const newArray = [];\n        for (let i = 0; i < arraySize; i++) {\n            newArray.push(Math.floor(Math.random()*this.maxHeight + 15));\n        }\n\n        // const newArray = [306,419,14,650,378,456,251,416,440,148,101,173,167,10,225,445,20,462,107,156,276,506,189,15,201];\n        this.setState({ array: newArray});\n        this.bars = newArray.map((value, i) => <div className=\"array\" key={i} index={i} color={green} type={undefined} style={{\n            height: value,\n            width: arrayWidth,\n            margin: arrayMargin}}\n        />);\n\n    }\n\n    speedChange(speed) {\n        speed = 3 * (100 - speed);\n        this.animationSpeed = speed;\n    }\n\n    async animateSelectionSort() {\n        const array = this.state.array;\n        const animations = getSelectionSortAnims(array)\n        const arrayBars = document.getElementsByClassName(\"array\")\n        \n        // first bar will be purple (current min)\n        arrayBars[0].style.backgroundColor = purple;\n        await wait(this.animationSpeed);\n\n        for (let i = 1; i < animations.length; i++) {\n            if (!this.isRunning) return;\n            // swapping animations[i][0] and animations[i][1]\n            if (typeof animations[i][1] === \"number\") {\n                cardFlip.play();\n                // the last arraybar is currently red, change it back\n                arrayBars[animations[i - 1][0]].style.backgroundColor = green;\n                const [index1, index2] = animations[i];\n\n                arrayBars[index1].style.backgroundColor = yellow;\n                arrayBars[index2].style.backgroundColor = yellow;\n                await wait(this.animationSpeed);\n\n                const temp = arrayBars[index1].style.height;\n                arrayBars[index1].style.height = arrayBars[index2].style.height;\n                arrayBars[index2].style.height = temp;\n                await wait(this.animationSpeed);\n\n                arrayBars[index1].style.backgroundColor = purple;\n                arrayBars[index2].style.backgroundColor = green;\n                await wait(this.animationSpeed);\n            }\n            // coloring a bar red or purple to indicate comparison\n            else {\n                const [index, color, type] = animations[i];\n                arrayBars[index].style.backgroundColor = color;\n                arrayBars[index].type = type;\n\n                if (animations[i - 1][1] === red) {\n                    arrayBars[animations[i - 1][0]].style.backgroundColor = green;\n                }\n                // if this is the new min, reset the last min\n                if (color === purple) {\n                    for (let j = index - 1; j > 0; j--) {\n                        if (arrayBars[j].type === \"sorted\") {\n                            break;\n                        }\n                        if (arrayBars[j].style.backgroundColor === \"rgb(138, 43, 226)\") { //purple\n                            arrayBars[j].style.backgroundColor = green;\n                            break;\n                        }\n                    }\n                }\n                await wait(this.animationSpeed);\n            }\n        }\n        \n        arrayBars[arrayBars.length - 1].style.backgroundColor = purple;\n        await wait(this.animationSpeed);\n\n        for (let i = 0; i < arrayBars.length; i++) {\n                arrayBars[i].style.backgroundColor = green;\n                arrayBars[i].type = undefined;\n                await wait(0.33 * this.animationSpeed);\n        }\n        \n        this.isRunning = false;\n    }\n\n    animateInsertionSort() {\n        console.log(\"Todo: Insertion sort\")\n    }\n\n    animateMergeSort() {\n        console.log(\"Todo: Merge sort\")\n    }\n\n    animateQuickSort() {\n        console.log(\"Todo: Quicksort\")\n    }\n\n    // generates many large arrays, logs \"true\" for each correct sort\n    testSort(mySort) {\n        for (let i = 0; i < 1000; i++) {\n            const testArr = [];\n            for (let j = 0; j < 1000; j++) {\n                testArr.push(Math.floor(Math.random()*500 + 20))\n            }\n            const testArr2 = [...testArr];\n    \n            mySort(testArr);\n            correctSort(testArr2);\n    \n            console.log(arrayEquality(testArr, testArr2));\n        }\n    }\n\n    async handleExecute(algorithm) {\n        this.isRunning = true;\n        switch(algorithm) {\n            case 'selection':\n                this.animateSelectionSort(); break;\n            case 'insertion':\n                this.animateInsertionSort(); break;\n            case 'merge':\n                this.animateMergeSort(); break;\n            case 'quick':\n                this.animateQuickSort(); break;\n            default:\n                this.animateSelectionSort(); break;\n        }\n    }\n\n    // everything rendered on screen is here\n    render() {\n        return (\n            <div>\n                <div id=\"color-strip\" />\n                <Menu onExecute={this.handleExecute} onGenerate={this.generateArray} onSpeedChange={this.speedChange} />\n                    <div id=\"bars-container\">\n                        {this.bars}\n                        {/* <button id=\"test-sort\" onClick={this.testSort.bind(this, selectionSortAlgo)}>Test Sort</button> */}\n                    </div>\n            </div>\n        )\n    }\n}\n\n// effectively a synchronous sleep function\nfunction wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// for testing purposes\nfunction correctSort(arr) {\n    return arr.sort((a, b) => a - b);\n}\n\n// checks if two arrays are equal (for testing)\nfunction arrayEquality(arr1, arr2) {\n\tif (arr1.length !== arr2.length) {\n        return false;\n    }\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import React from 'react';\nimport './App.css';\nimport SortingTimeVisualizer from './components/SortingTimeVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingTimeVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}