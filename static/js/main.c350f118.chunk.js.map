{"version":3,"sources":["resources/fonts/FiraCode-Regular.ttf","components/LengthSlider.js","components/SpeedSlider.js","components/Menu.js","components/Info.js","components/InfoBox.js","components/Timer.js","algorithms/Insertion.js","animations/InsertionAnimation.js","algorithms/Merge.js","animations/MergeAnimation.js","algorithms/Quick.js","animations/QuickAnimation.js","algorithms/Selection.js","animations/SelectionAnimation.js","algorithms/Bubble.js","animations/BubbleAnimation.js","algorithms/Heap.js","animations/HeapAnimation.js","algorithms/Counting.js","animations/CountingAnimation.js","algorithms/Shell.js","animations/ShellAnimation.js","components/SortingTimeVisualizer.js","App.js","serviceWorker.js","index.js","resources/card-flip.mp3","resources/card-flip-2.mp3"],"names":["module","exports","useStyles","makeStyles","root","width","color","input","backgroundColor","borderRadius","slider","LengthSlider","props","classes","React","useState","value","setValue","useEffect","onSlide","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","min","max","onChange","event","newValue","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","type","style","textAlign","disableUnderline","SpeedSlider","Menu","handleSpeedChange","interval","onSpeedChange","handleGenerate","length","onGenerate","handleExecute","onExecute","handleReset","onReset","handleSelect","onSelect","document","getElementById","render","onClick","label","Component","sq","t","info","selection","header","best","avg","worst","space","algo","insertion","merge","quick","bubble","heap","counting","shell","Transition","forwardRef","ref","Slide","direction","InfoBox","text","algorithm","hue","algoColors","styles","position","bottom","button","icon","fontSize","display","fontWeight","bold","normal","fontFamily","paper","maxHeight","minWidth","subHeader","marginTop","marginBottom","textDecoration","exit","open","setOpen","handleClose","Button","variant","Dialog","PaperProps","dialog","scroll","TransitionComponent","keepMounted","onClose","aria-describedby","DialogTitle","DialogContent","DialogContentText","ReactHtmlParser","DialogActions","Timer","startTimer","setState","status","timeStart","Date","now","state","time","timer","setInterval","stopTimer","clearInterval","resetTimer","setStatus","bool","setTimeout","centiseconds","Math","floor","slice","seconds","minutes","version","xmlns","viewBox","enableBackground","d","getInsertionAnimations","arr","animations","i","j","temp","push","animateInsertionSort","stateArray","a","getElementsByClassName","colors","purple","wait","animationInterval","isRunning","idx1","idx2","yellow","red","height","cardFlip","play","idx","green","gradients","3","1","2","4","8","5","16","6","32","7","64","getMergeAnimations","b","level","ceil","log2","mergeAnimate","left","right","end","k","animateMergeSort","getQuickAnimations","index","pivotIdx","pivot","partitionAnimate","animateQuickSort","sort","value1","parseInt","value2","getSelectionAnimations","minIdx","animateSelectionSort","undefined","getBubbleAnimations","animateBubbleSort","getHeapAnimations","len","heapifyAnimate","largest","animateHeapSort","playCount","isGreen","cardFlip2","getCountingAnimations","count","mapToHue","animateCountingSort","getShellAnimations","gap","animateShellSort","oldColor","UIfx","cardFlipMp3","throttleMs","volume","cardFlip2Mp3","blue","SortingTimeVisualizer","componentDidMount","getBoundingClientRect","selectAlgorithm","setRunning","timerElement","current","classList","add","remove","speedChange","generateArray","arraySize","array","defaultLength","windowWidth","window","innerWidth","radius","newArray","random","newBars","map","key","bars","cachedArray","resetArray","oldArray","testSort","mySort","startTime","testArr","testArr2","console","log","arrayEquality","elapsedTime","oldHue","getMenuHue","newColor","fade","createRef","ms","Promise","res","menuColors","lerp","u","start","step_u","menu","querySelector","infoButton","setProperty","currentColor","match","r","g","App","ReactGA","initialize","pageview","location","pathname","Boolean","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c350f118.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/FiraCode-Regular.dc34dd99.ttf\";","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport './Menu.css';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n  },\n  input: {\n    width: 50,\n    color: 'rgba(100%, 100%, 100%, 82.5%)',\n    backgroundColor: 'rgba(100%, 100%, 100%, 20%)',\n    borderRadius: '10px',\n  },\n  slider: {\n    color: 'rgba(100%, 100%, 100%, 82.5%)'\n  }\n});\n\nexport default function LengthSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(25);\n\n  useEffect(() => {\n    if (value < 5) {\n      props.onSlide(5);\n    } else if (value > 125) {\n      props.onSlide(125);\n    } else {\n      props.onSlide(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 5) {\n      setValue(5);\n    } else if (value > 125) {\n      setValue(125);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='input-slider' gutterBottom >\n        Array Length\n      </Typography >\n      <Grid container spacing={2} alignItems='center'>\n        <Grid item xs>\n          <Slider\n            className={classes.slider}\n            min={5}\n            max={125}\n            value={typeof value === 'number' ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby='input-slider'\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin='dense'\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 5,\n              max: 125,\n              type: 'number',\n              'aria-labelledby': 'input-slider',\n              style: {textAlign: 'center', color: 'white'},\n            }}\n            disableUnderline\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 220,\n    color: 'rgba(100%, 100%, 100%, 82.5%)'\n  },\n  slider: {\n    color: 'rgba(100%, 100%, 100%, 82.5%)'\n  }\n});\n\n// Sets the time interval between animation frames\nexport default function SpeedSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(10);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => props.onSlide(value), [value]);\n\n  const handleChange = (event, newValue) => setValue(newValue);\n\n  return (\n    <div className={classes.root}>\n      <Typography className='slider-label' id='continuous-slider' gutterBottom>\n        Sorting Speed\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item>\n        </Grid>\n        <Grid item xs>\n          <Slider value={value} onChange={handleChange} className={classes.slider} aria-labelledby='continuous-slider' />\n        </Grid>\n        <Grid item>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport LengthSlider from './LengthSlider';\nimport SpeedSlider from './SpeedSlider';\nimport './Menu.css';\n\nexport default class Menu extends React.Component {\n    // Event handlers for menu items\n    handleSpeedChange = interval => this.props.onSpeedChange(interval);\n    handleGenerate = length => this.props.onGenerate(length);\n    handleExecute = () => this.props.onExecute();\n    handleReset = () => this.props.onReset();\n\n    handleSelect = () => this.props.onSelect(document.getElementById('menu-select').value);\n\n    render = () => {\n        return (\n            <div id='menu-container'>\n                <div className='menu-item' id='generate' onClick={() => this.handleGenerate()}>New Array</div>\n                <div className='menu-item' id='reset' onClick={() => this.handleReset()}>Reset Array</div>\n                <SpeedSlider onSlide={interval => this.handleSpeedChange(interval)} />\n                <LengthSlider onSlide={length => this.handleGenerate(length)} />\n                <select className='menu-item' id='menu-select' onChange={() => this.handleSelect()}>\n                    <optgroup className='group' label='Simple Sorts'>\n                        <option value='selection'>Selection sort</option>\n                        <option value='insertion'>Insertion sort</option>\n                    </optgroup>\n                    <optgroup className='group' label='Efficient Sorts'>\n                        <option value='merge'>Merge sort</option>\n                        <option value='heap'>Heapsort</option>\n                        <option value='quick'>Quicksort</option>\n                        <option value='shell'>Shell sort</option>\n                    </optgroup>\n                    <optgroup className='group' label='Distribution Sorts'>\n                        <option value='counting'>Counting sort</option>\n                    </optgroup>\n                    <optgroup className='group' label='Other Sorts'>\n                        <option value='bubble'>Bubble sort</option>\n                    </optgroup>\n                    \n                    {/* <option value='comb'>Comb sort</option> */}\n                    {/* <option value='bucket'>Bucket sort</option> */}\n                    {/* <option value='radix'>Radix sort</option> */}\n                    {/* <option value='thanos'>Thanos sort</option> */}\n                </select>\n                <div className='menu-item' id='execute' onClick={() => this.handleExecute()}>Execute</div>\n            </div>\n        );\n    }\n}\n","// Contains all text displayed in the info box\n// Rendered in InfoBox.js\nconst sq = `<sup style='vertical-align: top; font-size: 0.6em;'>2</sup>`;\nconst t = `&nbsp;&nbsp;&nbsp;&nbsp;`;\nconst info = {\n    selection: {\n        header: `Selection Sort`,\n        best: `n${sq}`,\n        avg: `n${sq}`,\n        worst: `n${sq}`,\n        space: `1`,\n        algo: `\n        function selectionSort(arr) {<br/>\n        ${t}for (let i = 0; i < arr.length; i++) {<br/>\n        ${t}${t}let minIdx = i;<br/>\n        ${t}${t}for (let j = i+1; j < arr.length; j++) {<br/>\n        ${t}${t}${t}if (arr[j] < arr[minIdx]) {<br/>\n        ${t}${t}${t}${t}minIdx = j;<br/>\n        ${t}${t}${t}}<br/>\n        ${t}${t}}<br/>\n        ${t}${t}if (minIdx > i) {<br/>\n        ${t}${t}${t}[arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];<br/>\n        ${t}${t}}<br/>\n        ${t}}<br/>\n        ${t}return arr;<br/>\n        }`\n    },\n    insertion: {\n        header: `Insertion Sort`,\n        best: `n`,\n        avg: `n${sq}`,\n        worst: `n${sq}`,\n        space: `1`,\n        algo: `\n        function insertionSort(arr) {<br/>\n        ${t}for (let i = 1; i < arr.length; i++) {<br/>\n        ${t}${t}let j = i-1;<br/>\n        ${t}${t}const temp = arr[i];<br/>\n        ${t}${t}while (j >= 0 && arr[j] > temp) {<br/>\n        ${t}${t}${t}arr[j+1] = arr[j];<br/>\n        ${t}${t}${t}j--;<br/>\n        ${t}${t}}<br/>\n        ${t}${t}arr[j+1] = temp;<br/>\n        ${t}}<br/>\n        ${t}return arr;<br/>\n        }`\n    },\n    merge: {\n        header: `Merge Sort`,\n        best: `n log(n)`,\n        avg: `n log(n)`,\n        worst: `n log(n)`,\n        space: `n`,\n        algo: `\n        function mergeSort(arr) {<br/>\n        ${t}if (arr.length < 2) return arr;<br/><br/>\n        ${t}var mid = Math.floor(arr.length / 2);<br/>\n        ${t}var left = mergeSort(arr.slice(0, mid));<br/>\n        ${t}var right = mergeSort(arr.slice(mid));<br/><br/>\n        ${t}return merge(left, right);<br/>\n        }<br/>\n        <br/>\n        function merge(a, b) {<br/>\n        ${t}var result = [];<br/><br/>\n        ${t}while (a.length > 0 && b.length > 0) {<br/>\n        ${t}${t}result.push(a[0] < b[0] ? a.shift() : b.shift());<br/>\n        ${t}}<br/><br/>\n        ${t}return result.concat(a.length? a : b);<br/>\n        }`\n    },\n    quick: {\n        header: `Quicksort`,\n        best: `n log(n)`,\n        avg: `n log(n)`,\n        worst: `n${sq}`,\n        space: `log(n)`,\n        algo: `\n        function quicksort(arr, left, right) {<br/>\n        ${t}let index;<br/>\n        ${t}if (arr.length > 1) {<br/>\n        ${t}${t}index = partition(arr, left, right);<br/>\n        ${t}${t}if (left < index-1) {<br/>\n        ${t}${t}${t}quickAlgo(arr, left, index-1);<br/>\n        ${t}${t}}<br/>\n        ${t}${t}if (index < right) {<br/>\n        ${t}${t}${t}quickAlgo(arr, index, right);<br/>\n        ${t}${t}}<br/>\n        ${t}}<br/>\n        ${t}return arr;<br/>\n        }<br/>\n        <br/>\n        function partition(arr, left, right) {<br/>\n        ${t}const pivot = arr[Math.floor((right+left) / 2)];<br/>\n        <br/>\n        ${t}let i = left;<br/>\n        ${t}let j = right;<br/>\n        <br/>\n        ${t}while (i < j+1) {<br/>\n        ${t}${t}while (arr[i] < pivot) {<br/>\n        ${t}${t}${t}i++;<br/>\n        ${t}${t}}<br/>\n        ${t}${t}while (arr[j] > pivot) {<br/>\n        ${t}${t}${t}j--;<br/>\n        ${t}${t}}<br/>\n        ${t}${t}if (i < j+1) {<br/>\n        ${t}${t}${t}[arr[i], arr[j]] = [arr[j], arr[i]];<br/>\n        ${t}${t}${t}i++;<br/>\n        ${t}${t}${t}j--;<br/>\n        ${t}${t}}<br/>\n        ${t}}<br/>\n        ${t}return i;<br/>\n        }`\n    },\n    bubble: {\n        header: `Bubble Sort`,\n        best: `n`,\n        avg: `n${sq}`,\n        worst: `n${sq}`,\n        space: `1`,\n        algo: `\n        function bubbleSort(arr) {<br/>\n        ${t}for (let i = 0; i < arr.length; i++) {<br/>\n        ${t}${t}for (let j = 0; j < arr.length; j++) {<br/>\n        ${t}${t}${t}if (arr[j] > arr[j+1]) {<br/>\n        ${t}${t}${t}${t}[arr[j], arr[j+1]] = [arr[j+1], arr[j]];<br/>\n        ${t}${t}${t}}<br/>\n        ${t}${t}}<br/>\n        ${t}}<br/>\n        ${t}return arr;<br/>\n        }`\n    },\n    heap: {\n        header: `Heapsort`,\n        best: `n log(n)`,\n        avg: `n log(n)`,\n        worst: `n log(n)`,\n        space: `1`,\n        algo: `\n        function heapsort(arr) {<br/>\n        ${t}const len = arr.length;<br/>\n        ${t}let i  = Math.floor(len/2 - 1);<br/>\n        ${t}let j = len - 1;<br/>\n        <br/>\n        ${t}while (i >= 0) {<br/>\n        ${t}${t}heapify(arr, len, i);<br/>\n        ${t}${t}i--;<br/>\n        ${t}}<br/>\n        <br/>\n        ${t}while (j >= 0) {<br/>\n        ${t}${t}[arr[0], arr[j]] = [arr[j], arr[0]];<br/>\n        ${t}${t}heapify(arr, j, 0);<br/>\n        ${t}${t}j--;<br/>\n        ${t}}<br/>\n        <br/>\n        ${t}return arr;<br/>\n        }<br/>\n        <br/>\n        function heapify(arr, len, i) {<br/>\n        ${t}let largest = i;<br/>\n        ${t}const left = i*2 + 1;<br/>\n        ${t}const right = left + 1;<br/>\n        <br/>\n        ${t}if (left < len && arr[left] > arr[largest]) {<br/>\n        ${t}${t}largest = left;<br/>\n        ${t}}<br/>\n        ${t}if (right < len && arr[right] > arr[largest]) {<br/>\n        ${t}${t}largest = right;<br/>\n        ${t}}<br/>\n        <br/>\n        ${t}if (largest !== i) {<br/>\n        ${t}${t}[arr[i], arr[largest]] = [arr[largest], arr[i]];<br/>\n        ${t}${t}heapify(arr, len, largest);<br/>\n        ${t}}<br/>\n        }`\n    },\n    counting: {\n        header: `Counting Sort`,\n        best: `n+k`,\n        avg: `n+k`,\n        worst: `n+k`,\n        space: `k`,\n        algo: `\n        function countingSort(arr) {<br/>\n        ${t}max = Math.max(...arr);<br/>\n        ${t}min = Math.min(...arr);<br/>\n        ${t}let i = min;<br/>\n        ${t}let j = 0;<br/>\n        ${t}let count = [];<br/>\n        <br/>\n        ${t}for (i; i < max + 1; i++) {<br/>\n        ${t}${t}count[i] = 0;<br/>\n        ${t}}<br/>\n        ${t}for (i = 0; i < arr.length; i++) {<br/>\n        ${t}${t}count[arr[i]]++;<br/>\n        ${t}}<br/>\n        <br/>\n        ${t}for (i = min; i < max + 1; i++) {<br/>\n        ${t}${t}while (count[i] > 0) {<br/>\n        ${t}${t}${t}arr[j] = i;<br/>\n        ${t}${t}${t}j++;<br/>\n        ${t}${t}${t}count[i]--;<br/>\n        ${t}${t}}<br/>\n        ${t}}<br/>\n        <br/>\n        ${t}return arr;<br/>\n        }`\n    },\n    shell: {\n        header: `Shell Sort`,\n        best: `n log(n)`,\n        avg: `n log(n)${sq}`,\n        worst: `n log(n)${sq}`,\n        space: `1`,\n        algo: `\n        function shellSort(arr) {<br/>\n        ${t}const len = arr.length;<br/>\n        ${t}let gap = Math.floor(len / 2);<br/>\n        ${t}while (gap > 0) {<br/>\n        ${t}${t}for (let i = gap; i < len; i++) {<br/>\n        ${t}${t}${t}const temp = arr[i];<br/>\n        ${t}${t}${t}let j = i;<br/>\n        ${t}${t}${t}while (j >= gap && arr[j-gap] > temp) {<br/>\n        ${t}${t}${t}${t}arr[j] = arr[j-gap];<br/>\n        ${t}${t}${t}${t}j -= gap;<br/>\n        ${t}${t}${t}}<br/>\n        ${t}${t}${t}arr[j] = temp;<br/>\n        ${t}${t}}<br/>\n        ${t}${t}gap = Math.floor(gap / 2);<br/>\n        ${t}}<br/>\n        ${t}return arr;<br/>\n        }`\n    }\n};\nexport default info;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport info from './Info';\nimport { algoColors } from './SortingTimeVisualizer';\nimport ReactHtmlParser from 'react-html-parser';\nimport './SortingTimeVisualizer.css';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction='left' ref={ref} {...props} />;\n});\n\nexport default function InfoBox(props) {\n  const text = info[props.algorithm];\n  const hue = algoColors[props.algorithm];\n  const styles = {\n    container: {\n      position: 'relative',\n      bottom: '5%',\n    },\n    button: {\n      margin: 'auto',\n      borderRadius: '10%',\n    },\n    icon: {\n      fontSize: 75,\n      color: 'black',\n      position: 'relative',\n      bottom: '2px'\n    },\n    header: {\n      textAlign: 'center',\n      display: 'block',\n      color: `hsla(${hue}, 95%, 10%, 0.94)`,\n      fontSize: 35,\n      fontWeight: 800,\n    },\n    bold: {\n      fontSize: 16,\n      fontWeight: 600,\n      display: 'block',\n    },\n    normal: {\n      fontWeight: 500\n    },\n    algo: {\n      fontSize: 15,\n      fontWeight: 500,\n      fontFamily: `FiraCode`\n    },\n    paper: {\n      color: `hsla(${hue}, 95%, 5%, 0.94)`,\n      backgroundColor: `hsla(${hue}, 25%, 70%, 0.94)`,\n      maxHeight: `50vh`,\n      minWidth: `40vh`,\n      // maxWidth: `45vh`,\n      fontFamily: `Arial`\n    },\n    subHeader: {\n      textAlign: 'center',\n      display: 'block',\n      marginTop: 5,\n      marginBottom: 5,\n      textDecoration: `underline hsla(${hue}, 95%, 10%, 0.94)`\n    },\n    exit: {\n      fontSize: 14,\n      fontWeight: 500,\n      color: `hsla(${hue}, 95%, 10%, 0.94)`\n    }\n  };\n\n  const [open, setOpen] = React.useState(false);\n  \n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div id='info-box-container' style={styles.container}>\n        <Button id='info-button' variant='outlined' color='primary' onClick={handleClickOpen} style={styles.button}>\n            <MenuBookIcon className='info-icon' style={styles.icon}/>\n        </Button>\n        <Dialog\n          PaperProps={{style: styles.paper}}\n          style={styles.dialog}\n          scroll='paper'\n          open={open}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={handleClose}\n          aria-labelledby='alert-dialog-slide-title'\n          aria-describedby='alert-dialog-slide-description'\n        >\n          <DialogTitle id='alert-dialog-slide-title'>\n            <span id='info-header' style={styles.header}>\n              {text.header}\n            </span>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id='alert-dialog-slide-description'>\n              <span id='info-body' style={styles.paper}>\n                <span style={styles.subHeader}>Time Complexity</span>\n                <span style={styles.bold}>Best case:\n                  <span style={styles.normal}> &Omega;({ReactHtmlParser(text.best)})</span>\n                </span>\n                <span style={styles.bold}>Average case:\n                  <span style={styles.normal}> &Theta;({ReactHtmlParser(text.avg)})</span>\n                </span>\n                <span style={styles.bold}>Worst case:\n                  <span style={styles.normal}> O({ReactHtmlParser(text.worst)})</span>\n                </span>\n                <span style={styles.bold}>Space complexity:\n                  <span style={styles.normal}> O({ReactHtmlParser(text.space)})<br/><br/></span>\n                </span>\n                <span style={styles.subHeader}>Algorithm (JavaScript)</span>\n                <span style={styles.bold}> \n                  <span style={styles.algo}> {ReactHtmlParser(text.algo)}</span>\n                </span>\n              </span>\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} style={styles.exit}>\n              X\n            </Button>\n          </DialogActions>\n        </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Timer.css';\n// https://github.com/peterdurham/timers-demo\n\nexport default class Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: this.props.status,\n            timeStart: 0,\n            time: 0\n        };\n    }\n\n    // Starts whenever 'Execute' button is pressed\n    startTimer = () => {\n        this.setState({\n            status: true,\n            timeStart: Date.now() - this.state.time,\n            time: this.state.time\n        });\n        this.timer = setInterval(() => {\n            this.setState({ time: Date.now() - this.state.timeStart });\n        }, 10);\n    }\n\n    stopTimer = () => {\n        this.setState({ status: false });\n        clearInterval(this.timer);\n    }\n\n    resetTimer = () => {\n        this.setState({\n            timeStart: 0,\n            time: 0\n        });\n    }\n\n    setStatus = bool => {\n        if (bool) {\n            if (this.state.status) return;\n            this.resetTimer();\n            // Timer won't reset if this isn't in a setTimeout\n            setTimeout(() => this.startTimer(), 0);\n        }\n        else {\n            this.stopTimer();\n        }\n    }\n    \n    render = () => {\n        const { time } = this.state;\n        const centiseconds = ('0' + (Math.floor(time / 10) % 100)).slice(-2);\n        const seconds = ('0' + (Math.floor(time / 1000) % 60)).slice(-2);\n        const minutes = ('0' + (Math.floor(time / 60000) % 60)).slice(-2);\n        return (\n            <span id='timer-container' className='noselect'>\n                <span className='timer timer-icon'>\n                    <svg version='1.1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 296.228 296.228' enableBackground='new 0 0 296.228 296.228'>\n                        <g>\n                            <path d='m167.364,48.003v-23.003h10.5c6.903,0 12.5-5.597 12.5-12.5s-5.596-12.5-12.5-12.5h-59.5c-6.903,0-12.5,5.597-12.5,12.5s5.597,12.5 12.5,12.5h10.5v23.003c-59.738,9.285-105.604,61.071-105.604,123.37-3.55271e-15,68.845 56.01,124.854 124.854,124.854s124.854-56.01 124.854-124.854c0-62.299-45.866-114.085-105.604-123.37zm-19.25,223.225c-55.06,0-99.854-44.795-99.854-99.854s44.795-99.854 99.854-99.854 99.854,44.795 99.854,99.854-44.794,99.854-99.854,99.854z'/>\n                            <path d='m160.614,166.18v-58.889c0-6.903-5.597-12.5-12.5-12.5s-12.5,5.597-12.5,12.5v66.1c0,2.033 0.81,3.982 2.25,5.416l34.969,34.822c4.893,4.872 12.806,4.854 17.678-0.037 4.871-4.892 4.854-12.807-0.037-17.678l-29.86-29.734z'/>\n                        </g>\n                    </svg>\n                </span>\n                <span className='timer timer-display'>\n                    <span id='seconds'>{minutes}:{seconds}</span>\n                    <span id='centiseconds'>{centiseconds}</span>\n                </span>\n            </span>\n      );\n    }\n  }\n","const purple = '#8a2be2';\n\n// Executes sorting algorithm and determines the sequence of animations\nexport default function getInsertionAnimations(arr) {\n    const animations = [];\n\n    for (let i = 1; i < arr.length; i++) {\n        let j = i - 1;\n        const temp = arr[i];\n        // arr[i] = purple\n        animations.push([i, purple])\n        while (j >= 0 && arr[j] > temp) {\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            // Swap arr[j], arr[j + 1]\n            animations.push([j, j + 1])\n            j--;\n        }\n    }\n\n    return animations;\n}\n\n\n\n// Original insertion algo w/ more swapping for better visual\n// export function insertionAlgo(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n//             j--;\n//         }\n//     }\n//     return arr;\n// }\n\n// More efficient version - less swapping\n// export function insertionAlgo2(arr) {\n//     for (let i = 1; i < arr.length; i++) {\n//         let j = i - 1;\n//         const temp = arr[i];\n//         while (j >= 0 && arr[j] > temp) {\n//             arr[j+1] = arr[j];\n//             j--;\n//         }\n//         arr[j+1] = temp;\n//     }\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getInsertionAnimations from '../algorithms/Insertion';\n\n// Render insertion sort animations\nexport default async function animateInsertionSort(stateArray) {\n    const animations = getInsertionAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    // First bar will be purple (current min)\n    arr[0].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n    \n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n        // Swap two elements\n        if (typeof animations[i][1] === 'number') {\n            const [idx1, idx2] = animations[i];\n            \n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.red;\n            await wait(animationInterval);\n\n            [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n            arr[idx1].style.backgroundColor = colors.red;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            arr[idx2].style.backgroundColor = colors.purple;\n            if (i === animations.length - 1 || typeof animations[i + 1][1] !== 'number') {\n                cardFlip.play();\n                await wait(animationInterval);\n                arr[idx1].style.backgroundColor = colors.purple;\n            }\n        }\n        // Color an element\n        else {\n            const [idx, color] = animations[i];\n            arr[idx].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n    }\n\n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n","const purple = '#8a2be2';\n// Based on array size\nconst gradients = {\n  3: { 1: '#00747f', 2: '#0073e7', 4: purple },\n  4: { 1: '#007264', 2: '#0076b8', 4: '#006cf5', 8: purple },\n  5: { 1: '#007056', 2: '#007596', 4: '#0075d7', 8: '#0066f9', 16: purple },\n  6: { 1: '#006f4d', 2: '#00747f', 4: '#0076b8', 8: '#0073e7', 16: '#0061fa', 32: purple },\n  7: { 1: '#006e47', 2: '#00736f', 4: '#0076a0', 8: '#0076cf', 16: '#0070f0', 32: '#005df9', 64: purple }\n};\n\n// Executes sorting algorithm and determines the sequence of animations\nexport default function getMergeAnimations(a) {\n  const animations = [], b = [];\n  const level = Math.ceil(Math.log2(a.length))\n\n  for (let width = 1; width < a.length; width *= 2) {\n    const color = gradients[level][width];\n    // Play card flip sound effect\n    animations.push(null);\n    \n    for (let i = 0; i < a.length; i += 2 * width) {\n      mergeAnimate(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b, animations, color);\n    }\n    for (let i = 0; i < a.length; i++) {\n      a[i] = b[i];\n    }\n  }\n  return animations\n}\n\nfunction mergeAnimate(a, left, right, end, b, animations, color) {\n  let i = left, j = right;\n  for (let k = left; k < end; k++) {\n    if (i < right && (j >= end || a[i] <= a[j])) {\n      // arr[i] = color\n      animations.push([color, i]);\n      b[k] = a[i++];\n    }\n    else {\n      // Swap two elements\n      animations.push([color, k, j]);\n      b[k] = a[j++];\n    }\n  }\n}\n\n\n// Original merge sort algorithm\n// export function mergeAlgo(a) {\n//   const b = [];\n\n//   for (let width = 1; width < a.length; width *= 2) {\n//     for (let i = 0; i < a.length; i += 2 * width) {\n//       merge(a, i, Math.min(i + width, a.length), Math.min(i + 2*width, a.length), b);\n//     }\n//     for (let i = 0; i < a.length; i++) {\n//       a[i] = b[i];\n//     }\n//   }\n\n//   return a;\n// }\n\n// function merge(a, left, right, end, b) {\n//   let i = left, j = right;\n  \n//   for (let k = left; k < end; k++) {\n//     if (i < right && (j >= end || a[i] <= a[j])) {\n//       b[k] = a[i++];\n//     }\n//     else {\n//       b[k] = a[j++];\n//     }\n//   }\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getMergeAnimations from '../algorithms/Merge';\n\n// Render merge sort animations\nexport default async function animateMergeSort(stateArray) {\n    const animations = getMergeAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n        // New merge iteration\n        if (!animations[i]) {\n            cardFlip.play();\n        }\n        // Swap two elements\n        else if (animations[i].length === 3) {\n            const [color, idx1, idx2] = animations[i];\n\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            const temp = arr[idx2].style.height;\n            for (let i = idx2; i > idx1; i--) {\n                arr[i].style.height = arr[i - 1].style.height;\n            }\n            arr[idx1].style.height = temp;\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = color;\n            await wait(animationInterval);\n\n            arr[idx1].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n        // Color one element\n        else {\n            const [color, idx] = animations[i];\n            arr[idx].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            arr[idx].style.backgroundColor = color;\n            await wait(animationInterval);\n        }\n    }\n\n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n","// Executes sorting algorithm and determines the sequence of animations\nexport default function getQuickAnimations(arr, left, right, animations) {\n    let index;\n    if (arr.length > 1) {\n        index = partitionAnimate(arr, left, right, animations);\n        if (left < index - 1) {\n            getQuickAnimations(arr, left, index - 1, animations);\n        }\n        if (index < right) {\n            getQuickAnimations(arr, index, right, animations);\n        }\n    }\n    return animations;\n}\n\nfunction partitionAnimate(arr, left, right, animations) {\n    const pivotIdx = Math.floor((right + left) / 2)\n    const pivot = arr[pivotIdx];\n    // Color the pivot element red\n    animations.push([pivotIdx])\n    \n    let i = left;\n    let j = right;\n\n    while (i <= j) {\n        while (arr[i] < pivot) {\n            i++;\n        }\n        while (arr[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n            // Swap arr[i], arr[j]\n            animations.push([i, j])\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\n\n// Original quicksort algorithm\n// export function quickAlgo(arr, left, right) {\n//     let index;\n//     if (arr.length > 1) {\n//         index = partition(arr, left, right);\n//         if (left < index - 1) { // more elements on the left side of the pivot\n//             quickAlgo(arr, left, index - 1);\n//         }\n//         if (index < right) { // more elements on the right side of the pivot\n//             quickAlgo(arr, index, right);\n//         }\n//     }\n//     return arr;\n// }\n\n// function partition(arr, left, right) {\n//     const pivot = arr[Math.floor((right + left) / 2)];\n    \n//     let i = left;\n//     let j = right;\n\n//     while (i <= j) {\n//         while (arr[i] < pivot) {\n//             i++;\n//         }\n//         while (arr[j] > pivot) {\n//             j--;\n//         }\n//         if (i <= j) {\n//             [arr[i], arr[j]] = [arr[j], arr[i]];\n//             i++;\n//             j--;\n//         }\n//     }\n//     return i;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getQuickAnimations from '../algorithms/Quick';\n\n// Render quick sort animations\nexport default async function animateQuickSort(stateArray) {\n    const animations = getQuickAnimations(stateArray, 0, stateArray.length - 1, []);\n    const arr = document.getElementsByClassName('array');\n    stateArray.sort((a, b) => a - b);\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) return;\n        // Select new pivot\n        if (animations[i].length === 1) {\n            cardFlip.play();\n            const [idx] = animations[i];\n\n            arr[idx].style.backgroundColor = colors.red;\n            await wait(animationInterval + 10);\n        }\n        // Swap two elements\n        else {\n            const [idx1, idx2] = animations[i];\n\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval + 10);\n\n            [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n            await wait(animationInterval + 10);\n\n            const value1 = parseInt(arr[idx1].style.height.slice(0, -2));\n            const value2 = parseInt(arr[idx2].style.height.slice(0, -2));\n            arr[idx1].style.backgroundColor = value1 === stateArray[idx1] ? colors.purple : colors.green;\n            arr[idx2].style.backgroundColor = value2 === stateArray[idx2] ? colors.purple : colors.green;\n            await wait(animationInterval + 10);\n        }\n    }\n    \n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n","const purple = '#8a2be2';\nconst red = '#dc143c';\n\n// Executes sorting algorithm and determines the sequence of animations\nexport default function getSelectionAnimations(arr) {\n    const animations = [];\n    \n    for (let i = 0; i < arr.length; i++) {\n        let minIdx = i;\n        // arr[i] = purple\n        animations.push([i, purple, 'sorted'])\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n                // arr[j] = purple\n                animations.push([j, purple])\n            }\n            else {\n                // arr[j] = red\n                animations.push([j, red])\n            }\n        }\n\n        if (minIdx > i) {\n            [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n            // Swap a[i], a[minIdx]\n            animations.push([i, minIdx]);\n        }\n    }\n\n    return animations;\n}\n\n\n// Original selection sort algorithm\n// export function selectionAlgo(arr) {\n//     let minIdx;\n    \n//     for (let i = 0; i < arr.length; i++) {\n//         minIdx = i;\n//         for (let j = i + 1; j < arr.length; j++) {\n//             if (arr[j] < arr[minIdx]) {\n//                 minIdx = j;\n//             }\n//         }\n\n//         if (minIdx > i) {\n//             [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n//         }\n//     }\n\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getSelectionAnimations from '../algorithms/Selection';\n\n// Render selection sort animations\nexport default async function animateSelectionSort(stateArray) {\n    const animations = getSelectionAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n    \n    // First bar will be purple (current min)\n    arr[0].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n    \n    for (let i = 1; i < animations.length; i++) {\n        if (!isRunning) return;\n        // Swap two elements\n        if (typeof animations[i][1] === 'number') {\n            cardFlip.play();\n            // Last element is still red\n            arr[animations[i - 1][0]].style.backgroundColor = colors.green;\n            const [idx1, idx2] = animations[i];\n\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n            await wait(animationInterval);\n\n            arr[idx1].style.backgroundColor = colors.purple;\n            arr[idx2].style.backgroundColor = colors.green;\n            await wait(animationInterval);\n        }\n        // Color a bar red/purple to indicate result of comparison\n        else {\n            const [idx, color, type] = animations[i];\n            arr[idx].style.backgroundColor = color;\n            arr[idx].type = type;\n\n            if (animations[i - 1][1] === colors.red) {\n                arr[animations[i - 1][0]].style.backgroundColor = colors.green;\n            }\n            // Reset the previous min to green\n            if (color === colors.purple) {\n                for (let j = idx - 1; j > 0; j--) {\n                    if (arr[j].type !== 'sorted' && arr[j].style.backgroundColor === 'rgb(138, 43, 226)') { //purple\n                        arr[j].style.backgroundColor = colors.green;\n                    }\n                }\n            }\n            await wait(animationInterval);\n        }\n    }\n    \n    arr[arr.length - 1].style.backgroundColor = colors.purple;\n    await wait(animationInterval);\n\n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[i].type = undefined;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].type = undefined;\n        await wait(1000 / arr.length);\n    }\n}\n","// Executes sorting algorithm and determines the sequence of animations\nexport default function getBubbleAnimations(arr) {\n    const animations = [];\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > arr[j + 1]) {\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                // Swap arr[j], arr[j + 1]\n                animations.push([j, j + 1]);\n            }\n        }\n    }\n    return animations;\n}\n\n\n// Original bubble sort algorithm\n// export function bubbleAlgo(arr) {\n//     for (let i = 0; i < arr.length; i++) {\n//         for (let j = 0; j < arr.length; j++) {\n//             if (arr[j] > arr[j + 1]) {\n//                 [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n//             }\n//         }\n//     }\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getBubbleAnimations from '../algorithms/Bubble';\n\n// Render bubble sort animations\nexport default async function animateBubbleSort(stateArray) {\n    const animations = getBubbleAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) break;\n        // Only operation is swapping\n        const [idx1, idx2] = animations[i];\n        arr[idx1].style.backgroundColor = colors.yellow;\n        arr[idx2].style.backgroundColor = colors.yellow;\n        await wait(animationInterval);\n\n        [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n        await wait(animationInterval);\n        \n        const value1 = parseInt(arr[idx1].style.height.slice(0, -2));\n        const value2 = parseInt(arr[idx2].style.height.slice(0, -2));\n        arr[idx1].style.backgroundColor = value1 === stateArray[idx1] ? colors.purple : colors.green;\n        if (value2 === stateArray[idx2]) {\n            cardFlip.play();\n            arr[idx2].style.backgroundColor = colors.purple;\n        }\n        else {\n            arr[idx2].style.backgroundColor = colors.green;\n        }\n        \n        await wait(animationInterval);\n    }\n\n    await wait(500);    \n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n\n","// Executes sorting algorithm and determines the sequence of animations\nexport default function getHeapAnimations(arr) {\n    const animations = [];\n    const len = arr.length\n    let i  = Math.floor(len / 2 - 1);\n    // Last index of heap\n    let j = len - 1;\n\n    while (i >= 0) {\n        heapifyAnimate(arr, len, i, animations);\n        i--;\n    }\n\n    while (j >= 0) {\n        [arr[0], arr[j]] = [arr[j], arr[0]];\n        // Swap arr[0], arr[j]\n        animations.push([0, j])\n        heapifyAnimate(arr, j, 0, animations);\n        j--;\n    }\n    \n    return animations;\n}\n\nfunction heapifyAnimate(arr, len, i, animations) {\n    let largest = i;\n    const left = i * 2 + 1;\n    const right = left + 1;\n\n    if (left < len && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    if (right < len && arr[right] > arr[largest]) {\n        largest = right;\n    }\n\n    if (largest !== i) {\n        [arr[i], arr[largest]] = [arr[largest], arr[i]];\n        // Swap arr[i], arr[largest]\n        animations.push([i, largest, true])\n        heapifyAnimate(arr, len, largest, animations);\n    }\n}\n\n\n// // Original heap sort algorithm\n// export function heapAlgo(arr) {\n//     const len = arr.length\n//     let i  = Math.floor(len / 2 - 1);\n//     // Last index of heap\n//     let j = len - 1;\n\n//     while (i >= 0) {\n//         heapify(arr, len, i);\n//         i--;\n//     }\n\n//     while (j >= 0) {\n//         [arr[0], arr[j]] = [arr[j], arr[0]];\n//         heapify(arr, j, 0);\n//         j--;\n//     }\n    \n//     return arr;\n// }\n\n// function heapify(arr, len, i) {\n//     let largest = i;\n//     const left = i * 2 + 1;\n//     const right = left + 1;\n\n//     if (left < len && arr[left] > arr[largest]) {\n//         largest = left;\n//     }\n//     if (right < len && arr[right] > arr[largest]) {\n//         largest = right;\n//     }\n\n//     if (largest !== i) {\n//         [arr[i], arr[largest]] = [arr[largest], arr[i]];\n//         heapify(arr, len, largest);\n//     }\n// }\n","import { cardFlip, cardFlip2, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getHeapAnimations from '../algorithms/Heap';\n\n// Render heap sort animations\nexport default async function animateHeapSort(stateArray) {\n    const animations = getHeapAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    let playCount = 0;\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) break;\n        // Only procedure is swapping\n        const [idx1, idx2, isGreen] = animations[i];\n        arr[idx1].style.backgroundColor = colors.yellow;\n        arr[idx2].style.backgroundColor = colors.yellow;\n        await wait(animationInterval);\n\n        [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n        await wait(animationInterval);\n        \n        arr[idx1].style.backgroundColor = colors.green;\n        if (isGreen) {\n            if (++playCount === 3) {\n                playCount = 0;\n                cardFlip.play();\n            }\n            arr[idx2].style.backgroundColor = colors.green;\n        }\n        else {\n            playCount = 4;\n            cardFlip2.play();\n            arr[idx2].style.backgroundColor = colors.purple;\n        }\n        await wait(animationInterval);\n    }\n\n    await wait(500); \n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}","let min, max;\n\n// Executes sorting algorithm and determines the sequence of animations\nexport default function getCountingAnimations(arr) {\n    const animations = [];\n    max = Math.max(...arr);\n    min = Math.min(...arr);\n    let i = min;\n    let j = 0;\n    let count = [];\n\n    for (i; i <= max; i++) {\n        count[i] = 0;\n    }\n    for (i = 0; i < arr.length; i++) {\n        count[arr[i]]++;\n        const hue = mapToHue(arr[i]);\n        animations.push([i, hue]);\n    }\n\n    for (i = min; i <= max; i++) {\n        while (count[i] > 0) {\n            arr[j] = i;\n            const hue = mapToHue(i);\n            animations.push([j, i, hue]);\n            j++;\n            count[i]--;\n        }\n    }\n    \n    return animations;\n}\n\n// Maps a value to the 0-240 range on the hue wheel based on value range\nfunction mapToHue(value) {\n    // a1,a2 --> min,max\n    // b1,b2 --> 0, 240\n    return 240 * (value - min) / (max - min);\n}\n\n\n// Original counting sort algorithm\n// export function countingAlgo(arr) {\n//     max = Math.max(...arr);\n//     min = Math.min(...arr);\n//     let i = min;\n//     let j = 0;\n//     let count = [];\n\n//     for (i; i <= max; i++) {\n//         count[i] = 0;\n//     }\n//     for (i = 0; i < arr.length; i++) {\n//         count[arr[i]]++;\n//     }\n\n//     for (i = min; i <= max; i++) {\n//         while (count[i] > 0) {\n//             arr[j] = i;\n//             j++;\n//             count[i]--;\n//         }\n//     }\n\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getCountingAnimations from '../algorithms/Counting';\n\n// Render heap sort animations\nexport default async function animateCountingSort(stateArray) {\n    const animations = getCountingAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    \n    // Color array elements according to their value\n    let i = 0;\n    for (i; i < animations.length / 2; i++) {\n        if (!isRunning) break;\n\n        const [idx, hue] = animations[i];\n        arr[idx].style.backgroundColor = `hsl(${hue}, 100%, 45%)`;\n        await wait(animationInterval + 10);\n    }\n    await wait(500);\n\n    // Sorting step\n    for (i; i < animations.length; i++) {\n        if (!isRunning) break;\n        const [idx, height, hue] = animations[i];\n        if (arr[idx].style.height !== height + 'px') {\n            cardFlip.play();\n            arr[idx].style.height = height + 'px';\n        }\n        arr[idx].style.backgroundColor = `hsl(${hue}, 100%, 45%)`;\n\n        await wait(animationInterval + 10);\n    }\n    await wait(500);\n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}","// Executes sorting algorithm and determines the sequence of animations\nexport default function getShellAnimations(arr) {\n    const animations = [];\n\n    const len = arr.length;\n    for (let gap = Math.floor(len / 2); gap > 0; gap = Math.floor(gap / 2)) {\n        // New shell iteration\n        for (let i = gap; i < len; i++) {\n            const temp = arr[i];\n            // arr[i] = purple\n            animations.push([i]);\n            for (let j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\n                [arr[j], arr[j - gap]] = [arr[j - gap], arr[j]];\n                // Swap arr[j], arr[j - gap]\n                animations.push([j - gap, j]);\n            }\n        }\n    }\n    \n    return animations;\n}\n\n\n// Original shell algo w/ more swapping for better visual\n// export function shellAlgo(arr) {\n//     const len = arr.length;\n//     for (let gap = Math.floor(len / 2); gap > 0; gap = Math.floor(gap / 2)) {\n//         for (let i = gap; i < len; i++) {\n//             const temp = arr[i];\n//             for (let j = i; j >= gap && arr[j-gap] > temp; j -= gap) {\n//                 [arr[j], arr[j-gap]] = [arr[j-gap], arr[j]];\n//             }\n//         }\n//     }\n//     return arr;\n// }\n\n// More efficient version - less swapping\n// export function shellAlgo2(arr) {\n//     const len = arr.length;\n//     let gap = Math.floor(len / 2);\n//     while (gap > 0) {\n//         for (let i = gap; i < len; i++) {\n//             const temp = arr[i];\n//             let j = i;\n//             while (j >= gap && arr[j-gap] > temp) {\n//                 arr[j] = arr[j-gap];\n//                 j -= gap;\n//             }\n//             arr[j] = temp;\n//         }\n//         gap = Math.floor(gap / 2);\n//     }\n//     return arr;\n// }\n","import { cardFlip, wait, colors, isRunning, animationInterval } from '../components/SortingTimeVisualizer';\nimport getShellAnimations from '../algorithms/Shell';\n\n// Render shell sort animations\nexport default async function animateShellSort(stateArray) {\n    const animations = getShellAnimations(stateArray);\n    const arr = document.getElementsByClassName('array');\n\n    for (let i = 0; i < animations.length; i++) {\n        if (!isRunning) break;\n        // Swap two elements\n        if (animations[i].length > 1) {\n            cardFlip.play();\n            const [idx1, idx2] = animations[i];\n            arr[idx1].style.backgroundColor = colors.yellow;\n            arr[idx2].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n\n            [arr[idx1].style.height, arr[idx2].style.height] = [arr[idx2].style.height, arr[idx1].style.height];\n            await wait(animationInterval);\n            \n            const value1 = parseInt(arr[idx1].style.height.slice(0, -2));\n            const value2 = parseInt(arr[idx2].style.height.slice(0, -2));\n            arr[idx1].style.backgroundColor = value1 === stateArray[idx1] ? colors.purple : colors.green;\n            arr[idx2].style.backgroundColor = value2 === stateArray[idx2] ? colors.purple : colors.green;\n            await wait(animationInterval);\n        }\n        // Color an element\n        else {\n            const [idx] = animations[i];\n            const oldColor = arr[idx].style.backgroundColor;\n            arr[idx].style.backgroundColor = colors.yellow;\n            await wait(animationInterval);\n            arr[idx].style.backgroundColor = oldColor;\n            await wait(animationInterval);\n        }\n    }\n\n    await wait(500);    \n    for (let i = 0; i < arr.length / 2; i++) {\n        arr[i].style.backgroundColor = colors.green;\n        arr[arr.length - i - 1].style.backgroundColor = colors.green;\n        await wait(1000 / arr.length);\n    }\n}\n\n","import React from 'react';\nimport Menu from './Menu';\nimport InfoBox from './InfoBox';\nimport Timer from './Timer';\nimport UIfx from 'uifx';\nimport cardFlipMp3 from '../resources/card-flip.mp3';\nimport cardFlip2Mp3 from '../resources/card-flip-2.mp3';\nimport './SortingTimeVisualizer.css';\n\nimport animateInsertionSort from '../animations/InsertionAnimation';\nimport animateMergeSort from '../animations/MergeAnimation';\nimport animateQuickSort from '../animations/QuickAnimation';\nimport animateSelectionSort from '../animations/SelectionAnimation';\nimport animateBubbleSort from '../animations/BubbleAnimation';\nimport animateHeapSort from '../animations/HeapAnimation';\nimport animateCountingSort from '../animations/CountingAnimation';\nimport animateShellSort from '../animations/ShellAnimation';\n\n// import { mergeAlgo } from '../algorithms/Merge';\n\n// Not very React-y, but these are only passed to animation/algorithm scripts that execute the sort\nexport let isRunning = false;\nexport let animationInterval = 0;\nexport const cardFlip = new UIfx(cardFlipMp3, { throttleMs: 60, volume: 0.7 });\nexport const cardFlip2= new UIfx(cardFlip2Mp3,{ throttleMs: 140,volume: 0.6 });\nexport const colors = {\n    purple: '#8a2be2',\n    red: '#dc143c',\n    green: '#24682d',\n    yellow: '#ffff00',\n    blue: '#0076b8'\n};\n\n\n//* Main component of application *//\nexport default class SortingTimeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        // array holds height values, bars holds the actual divs\n        this.state = {\n            array: [],\n            bars: [],\n            algorithm: 'selection'\n        };\n        \n        this.cachedArray = [];\n        this.defaultLength = 60;\n        this.maxHeight = 550;\n        this.timerElement = React.createRef();\n    }\n\n    componentDidMount = () => {\n        // 85% of the distance between array container and menu\n        this.maxHeight = Math.floor(0.85 * (document.getElementById('bars-container').getBoundingClientRect().bottom -\n                                            document.getElementById('menu-container').getBoundingClientRect().bottom));\n        // initializeTheme();\n        this.selectAlgorithm('selection')\n    }\n    \n    // True if algorithm is currently running, false otherwise\n    setRunning = async bool => {\n        isRunning = bool;\n        this.timerElement.current.setStatus(bool);\n        if (bool) {\n            document.getElementById('execute').classList.add('running');\n        } else {\n            document.getElementById('execute').classList.remove('running');\n        }            \n    }\n\n    // Compute reciprocal of interval to make the slider feel linear\n    speedChange = interval => {\n        animationInterval = interval < 5 ? 300 : 1500/interval - 15;\n    }\n\n    // Display a new randomized array, possibly with a new length\n    generateArray = length => {\n        const array = document.getElementsByClassName('array');\n        if (isRunning) {\n            this.setRunning(false);\n        }\n        let arraySize;\n        if (length) {\n            arraySize = length;\n            this.defaultLength = length;\n        } else {\n            arraySize = this.defaultLength;\n        }\n\n        // The constant values are arbitrary and were chosen because they look nice\n        const windowWidth = window.innerWidth;\n        const margin = Math.max((windowWidth) / (10 * arraySize), 1.5);\n        const width = Math.max((windowWidth - 100) / (1.75 * arraySize), 7);\n        const radius = Math.max(width / 10, 3);\n        \n        const newArray = [];\n        for (let i = 0; i < arraySize; i++) {\n            newArray.push(Math.floor(Math.random() * this.maxHeight + 25));\n        }\n        //const newArray = [ 15, 200, 150, 25, 300 ];\n        const newBars = newArray.map((value, i) => <div className='array' key={i} idx={i} color={colors.green} type={undefined} style={{\n            height: value,\n            margin: margin,\n            width: width,\n            borderRadius: radius,\n        }} />);\n        this.setState({\n            array: newArray,\n            bars: newBars\n        });\n\n        // Deep copy to allow resetting to original state\n        this.cachedArray = [];\n        for (let i = 0; i < newArray.length; i++) {\n            this.cachedArray.push(newArray[i]);\n        }\n\n        // In case we are currently in execution\n        for (let i = 0; i < array.length; i++) {\n            array[i].style.backgroundColor = colors.green;\n        }\n    }\n\n    // Return bar heights and colors to pre-sorted state\n    resetArray = async () => {\n        cardFlip.play()\n        const array = document.getElementsByClassName('array');\n        const arraySize = array.length;\n\n        this.setRunning(false);\n\n        const oldArray = []\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.height = this.cachedArray[i] + 'px';\n            array[i].type = undefined;\n            oldArray.push(this.cachedArray[i]);\n        }\n\n        this.setState({array: oldArray});\n        \n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.backgroundColor = '#07ad1d';\n        }\n        await wait(333);\n        for (let i = 0; i < arraySize; i++) {\n            array[i].style.backgroundColor = colors.green;\n        }\n    }\n\n    // Generates many large arrays, logs 'true' for each correct sort\n    testSort = mySort => {\n        const startTime = new Date();\n        for (let i = 0; i < 100; i++) {\n            const testArr = [];\n            const length = Math.floor(Math.random()*1001);\n            for (let j = 0; j < length; j++) {\n                testArr.push(Math.floor(Math.random()*501));\n            }\n            const testArr2 = [...testArr];\n\n            mySort(testArr);\n            testArr2.sort((a, b) => a - b);\n    \n            console.log(arrayEquality(testArr, testArr2));\n        }\n        const elapsedTime = new Date() - startTime;\n        console.log('Elapsed time: ', elapsedTime, ' ms');\n    }\n\n    // Response to selecting algorithm from dropdown\n    selectAlgorithm = async selection => {\n        this.setState({ algorithm: selection });\n        const oldHue = getMenuHue();\n        const newColor = algoColors[selection];\n        await fade(oldHue, newColor);\n    }\n\n    // Runs selected algorithm\n    handleExecute = async () => {\n        if (isRunning) return;\n        cardFlip.play(0);\n        this.setRunning(true);\n\n        const array = this.state.array;\n        switch (this.state.algorithm) {\n            case 'selection': await animateSelectionSort(array); break;\n            case 'insertion': await animateInsertionSort(array); break;\n            case 'merge': await animateMergeSort(array); break;\n            case 'quick': await animateQuickSort(array); break;\n            case 'bubble': await animateBubbleSort(array); break;\n            case 'heap': await animateHeapSort(array); break;\n            case 'counting': await animateCountingSort(array); break;\n            case 'shell': await animateShellSort(array); break;\n            default: await animateSelectionSort(array);\n        }\n\n        this.setRunning(false);\n    }\n\n    // Everything on screen is rendered here\n    render = () => {\n        return (\n            <div>\n                <div id='color-strip' />\n                <Menu onGenerate={this.generateArray} onReset={this.resetArray} onSpeedChange={this.speedChange} onExecute={this.handleExecute} onSelect={this.selectAlgorithm} />\n                <div id='body-container'>\n                    <div id='left-container'>\n                        {/* TODO: ALIGNMENT BUTTONS */}\n                    </div>\n                    <div id='bars-container'>\n                        {this.state.bars}\n                        {/* Used for testing algorithms */}\n                        {/* <button id='test-sort' onClick={this.testSort.bind(this, mergeAlgo)}>Test Sort</button> */}\n                    </div>\n                    <div id='right-container'>\n                        <InfoBox algorithm={this.state.algorithm} />\n                    </div>\n                </div>\n                \n                <Timer status={isRunning} ref={this.timerElement}/>\n            </div>\n        )\n    }\n}\n\n\n//* Helpers *//\n// Effectively a synchronous sleep function\nexport const wait = ms => new Promise(res => setTimeout(res, ms));\n\n// For testing purposes\nconst arrayEquality = (a, b) => {\n\tif (a.length !== b.length) {\n        return false;\n    }\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// For menu color fading - based on average case\nexport const menuColors = {\n    purple: 270, // Initial\n    red: 5,      // O(n^2)\n    orange: 28,  // O(nlogn)\n    yellow: 45,  // O(n)\n    // Specific algorithms\n    shell: 18,   // O(n(logn)^2)\n};\n\nexport const algoColors = {\n    selection: menuColors.red,\n    insertion: menuColors.red,\n    merge: menuColors.orange,\n    quick: menuColors.orange,\n    bubble: menuColors.red,\n    heap: menuColors.orange,\n    counting: menuColors.yellow,\n    shell: menuColors.shell\n};\n\n// Linear interpolation\nconst lerp = (a,b,u) => (1-u) * a + u * b;\n\n// Transition color theme\nconst fade = async (start, end) => {\n    const duration = 1000;\n    const interval = 10;\n    const step_u = interval / duration;\n    const menu = document.getElementById('menu-container').style;\n    const icon = document.querySelector('.info-icon').style;\n    const infoButton = document.getElementById('info-button').style;\n    for (let u = 0.0; u < 1.0; u += step_u) {\n        const hue = parseInt(lerp(start, end, u));\n        menu.setProperty('background-color', `hsl(${hue}, 95%, 35%)`);\n        menu.setProperty('box-shadow', `-1.5px 1.5px 2.5px hsl(${hue}, 95%, 15%)`);\n        icon.setProperty('color',`hsl(${hue}, 95%, 20%)`)\n        infoButton.setProperty('border-color', `hsl(${hue}, 95%, 25%)`);\n        infoButton.setProperty('background-color', `hsla(${hue}, 95%, 30%, 0.1)`);\n        await wait(interval);\n    }\n};\n\nconst getMenuHue = () => {\n    const menu = document.getElementById('menu-container');\n    const currentColor = menu.style.backgroundColor.match(/\\d+/g)?.map(Number);\n    if (!currentColor) return menuColors.purple;\n    const [r, g, b] = [currentColor[0]/255, currentColor[1]/255, currentColor[2]/255];\n    const max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let hue = 0;\n    if (max !== min) {\n        const d = max - min;\n        switch (max) {\n            case r: hue = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: hue = (b - r) / d + 2; break;\n            case b: hue = (r - g) / d + 4; break;\n            default: break;\n        }\n    }\n    return hue * 60;\n};\n\n// RGB Version\n// const fade = async (element, property, start, end, duration) => {\n//   const interval = 10;\n//   const step_u = interval / duration;\n//   console.log(step_u)\n//   for (let u = 0.0; u < 1.0; u += step_u) {\n//     const r = parseInt(lerp(start.r, end.r, u));\n//     const g = parseInt(lerp(start.g, end.g, u));\n//     const b = parseInt(lerp(start.b, end.b, u));\n//     element.style.setProperty(property, `rgb(${r},${g},${b})`);\n//     await wait(interval);\n//   }\n// };\n// const menuColors = {\n//     blue: { r:22, g:94, b:161, shadow:{r:12, g:65, b:116} },\n//     red: { r:170, g:8, b:8, shadow:{r:80, g:0, b:0} },\n//     orange: {r:194, g:108, b:11, shadow:{r:97, g:63, b:0} },\n//     yellow: {r:202, g:165, b:0, shadow:{r:73, g:66, b:0} }\n// };\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport SortingTimeVisualizer from './components/SortingTimeVisualizer';\nimport ReactGA from 'react-ga'; // https://github.com/react-ga/react-ga\n\n\nfunction App() {\n  // Google Analytics\n  useEffect(() => {\n    ReactGA.initialize('UA-174975160-2');\n    ReactGA.pageview(window.location.pathname);\n  }, []);\n\n  return (\n    <div className='App'>\n      <SortingTimeVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './resources/fonts/FiraCode-Regular.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/card-flip.2317ec81.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card-flip-2.4f42bc57.mp3\";"],"sourceRoot":""}